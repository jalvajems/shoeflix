<!DOCTYPE HTML>
<html lang="en">
<head>
    <title>Shoeflix</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <!-- Fonts -->
    <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,500,600,700" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Rokkitt:100,300,400,700" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Rokkitt:wght@100;300;400;700&display=swap" rel="stylesheet">

    <!-- Bootstrap -->
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Animate.css -->
    <link rel="stylesheet" href="/css/animate.css">
    <!-- Icomoon Icon Fonts -->
    <link rel="stylesheet" href="/css/icomoon.css">
    <!-- Ion Icon Fonts -->
    <link rel="stylesheet" href="/css/ionicons.min.css">
    <!-- Magnific Popup -->
    <link rel="stylesheet" href="/css/magnific-popup.css">
    <!-- Flexslider -->
    <link rel="stylesheet" href="/css/flexslider.css">
    <!-- Owl Carousel -->
    <link rel="stylesheet" href="/css/owl.carousel.min.css">
    <link rel="stylesheet" href="/css/owl.theme.default.min.css">
    <!-- Date Picker -->
    <link rel="stylesheet" href="/css/bootstrap-datepicker.css">
    <!-- Flaticons -->
    <link rel="stylesheet" href="/fonts/flaticon/font/flaticon.css">
    <!-- Theme Style -->
    <link rel="stylesheet" href="/css/style.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- Product Detail CSS -->
    <link rel="stylesheet" href="/css/productdetail.css">
    <!-- SweetAlert2 -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
        <link rel="stylesheet" href="/css/productdetail.css">
    
</head>
<body>
    <!-- Header from the provided code -->
    <div id="page">
        <nav class="colorlib-nav" role="navigation">
            <div class="top-menu">
                <div class="container">
                    <div class="row">
                        <div class="col-sm-7 col-md-9">
                            <div id="colorlib-logo"><a href="/">Shoeflix</a></div>
                        </div>
\
                    </div>
                    <div class="row">
                        <div class="col-sm-12 text-left menu-1">
                            <ul>
                                <li class="active"><a href="/">Home</a></li>
                                <li class="shop"><a href="/shop">Shop</a></li>
                                <% if (!locals.user) { %>
                                    <li class="signup"><a href="/signup">Sign Up</a></li>
                                    <li class="login"><a href="/login">Login</a></li>
                                <% } else { %>
                                    <li class="nav-item">
                                        <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            <i class="fas fa-user"></i> <%= user.name %>
                                        </a>
                                        <ul class="dropdown-menu" aria-labelledby="userDropdown">
                                            <li><a class="dropdown-item" href="/userProfile">Profile</a></li>
                                            <li><a class="dropdown-item" href="/logout">Logout</a></li>
                                        </ul>
                                    </li>
                                <% } %>
                                <li class="cart"><a href="/cart"><i class="icon-shopping-cart"></i> Cart</a></li>
                                <li class="nav-item"><a class="nav-link" href="/wishlist">Wishlist</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="sale">
                <div class="container">
                    <div class="row">
                        <div class="col-sm-8 offset-sm-2 text-center">
                            <div class="row">
                                <div class="owl-carousel2">
                                    <div class="item">
                                        <div class="col">
                                            <h3><a href="#">25% off (Almost) Everything! Use Code: Summer Sale</a></h3>
                                        </div>
                                    </div>
                                    <div class="item">
                                        <div class="col">
                                            <h3><a href="#">Our biggest sale yet 50% off all summer shoes</a></h3>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Breadcrumbs -->
        <div class="bg-light py-2 breadcrumbs">
            <div class="container">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item active">Product Details</li>
                    </ol>
                </nav>
            </div>
        </div>

        <!-- Product Detail Section -->
        <section class="py-5">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 product-images">
                        <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-indicators">
                                <% for(let i = 0; i < product.productImage.length; i++) { %>
                                    <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="<%= i %>"
                                        class="<%= i === 0 ? 'active' : '' %>"></button>
                                <% } %>
                            </div>
                            <div class="carousel-inner">
                                <% product.productImage.forEach((image, index) => { %>
                                    <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                                        <img src="/uploads/product-images/<%= image %>" class="d-block w-100 product-img" alt="<%= product.productName %>">
                                        <% if (index === 0) { %>
                                            <button class="wishlist-btn" onclick="toggleWishlist('<%= product._id %>', event)" title="Add to Wishlist">
                                                <span class="icon-heart-o"></span>
                                            </button>
                                        <% } %>
                                    </div>
                                <% }); %>
                            </div>
                            <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon"></span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                                <span class="carousel-control-next-icon"></span>
                            </button>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <h2 class="product-title mb-3"><%= product.productName %></h2>
                        <div class="mb-3 d-flex align-items-center gap-3 flex-wrap">
                            <% if (bestOffer) { %>
                                <h3 class="me-3 mb-0 text-success">₹<%= (product.salePrice).toFixed(2) %></h3>
                                <strike><h4 class="me-3 mb-0 text-muted">₹<%= product.regularPrice.toFixed(2) %></h4></strike>
                                <p class="text-success">Offer Applied: <%= bestOffer.name %> (Save ₹<%= bestOffer.discount.toFixed(2) %>)</p>
                            <% } else { %>
                                <h3 class="me-3 mb-0 text-success">₹<%= product.salePrice.toFixed(2) %></h3>
                                <strike><h4 class="me-3 mb-0 text-muted">₹<%= product.regularPrice.toFixed(2) %></h4></strike>
                            <% } %>
                        </div>
                        <p><%= product.description %></p>
                        <div><h4>Category: <%= category.name %></h4></div>

                        <div class="mb-4">
                            <h5>Size</h5>
                            <div class="sizes mb-3 d-flex flex-wrap gap-2">
                                <% product.variants.forEach(variant => { %>
                                    <div class="size-option" data-size="<%= variant.size %>" data-stock="<%= variant.quantity %>">
                                        <%= variant.size %>
                                    </div>
                                <% }); %>
                            </div>
                            <div id="stock-info" class="text-muted">Select a size to see available stock</div>
                        </div>

                        <div class="mb-4">
                            <h5>Quantity</h5>
                            <div class="quantity-control d-flex align-items-center">
                                <button class="quantity-minus btn btn-sm btn-outline-secondary"><i class="fas fa-minus"></i></button>
                                <input type="number" id="quantity" name="quantity" value="1" min="1" max="5" class="form-control mx-2">
                                <button class="quantity-plus btn btn-sm btn-outline-secondary"><i class="fas fa-plus"></i></button>
                            </div>
                        </div>

                        <div class="mb-4">
                            <form id="addToCartForm">
                                <input type="hidden" name="productId" value="<%= product._id %>">
                                <button type="submit" class="add-to-cart-btn btn btn-primary">
                                    <i class="fas fa-shopping-cart me-2"></i> Add to Cart
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </section>
        <section class="recommended-products py-5 bg-light">
            <div class="container">
                <h3 class="text-center mb-4">Related Products</h3>
                <% if (relatedProduct && relatedProduct.length > 0) { %>
                    <div class="row">
                        <% relatedProduct.forEach(product => { %>
                            <div class="col-lg-3 col-md-6 col-sm-6 mb-4">
                                <div class="card h-100 shadow-sm">
                                    <a href="/productDetails/<%= product._id %>">
                                        <img src="/uploads/product-images/<%= product.productImage[0] || 'default-image.jpg' %>" class="card-img-top" alt="<%= product.productName %>">
                                    </a>
                                    <div class="card-body text-center">
                                        <h5 class="card-title">
                                            <a href="/product-details/<%= product._id %>" class="text-dark text-decoration-none"><%= product.productName %></a>
                                        </h5>
                                        <p class="card-text text-success">₹<%= product.salePrice.toFixed(2) %></p>
                                        <% if (product.averageRating) { %>
                                            <div class="product-rating mb-2">
                                                <% for (let i = 1; i <= 5; i++) { %>
                                                    <i class="fas fa-star <%= i <= Math.round(product.averageRating) ? 'text-warning' : 'text-muted' %>"></i>
                                                <% } %>
                                                <span class="ms-2 text-muted">(<%= product.ratingCount || 0 %>)</span>
                                            </div>
                                        <% } else { %>
                                            <p class="text-muted">No ratings yet</p>
                                        <% } %>
                                        <a href="/productDetails/<%= product._id %>" class="btn btn-outline-primary btn-sm">View Details</a>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                <% } else { %>
                    <p class="text-center text-muted">No recommended products available.</p>
                <% } %>
            </div>
        </section>
      <!-- Reviews and Ratings Section -->
<section class="reviews-section py-5">
    <div class="container">
        <h3 class="text-center mb-5">Customer Reviews</h3>

        <!-- Display Average Rating -->
        <div class="text-center mb-5">
            <% if (product.averageRating > 0) { %>
                <div class="average-rating">
                    <h5 class="fw-bold">Average Rating: <%= product.averageRating.toFixed(1) %> / 5</h5>
                    <div class="stars mb-2">
                        <% for (let i = 1; i <= 5; i++) { %>
                            <i class="fas fa-star <%= i <= Math.round(product.averageRating) ? 'text-warning' : 'text-muted' %>"></i>
                        <% } %>
                        <span class="ms-2 text-muted">(<%= product.ratingCount %> reviews)</span>
                    </div>
                </div>
            <% } else { %>
                <p class="text-muted">No reviews yet. Be the first to review this product!</p>
            <% } %>
        </div>

        <!-- Review Submission Form -->
        <% if (user) { %>
            <% if (hasPurchased) { %>
                <div class="review-form mb-5 p-4 bg-light rounded shadow-sm">
                    <h5 class="mb-4 fw-bold">Write a Review</h5>
                    <form id="reviewForm">
                        <input type="hidden" name="productId" value="<%= product._id %>">
                        <div class="mb-4">
                            <label for="rating" class="form-label fw-semibold">Rating</label>
                            <div class="star-rating d-flex align-items-center">
                                <% for (let i = 5; i >= 1; i--) { %>
                                    <input type="radio" name="rating" value="<%= i %>" id="star<%= i %>" required>
                                    <label for="star<%= i %>"><i class="fas fa-star text-muted"></i></label>
                                <% } %>
                            </div>
                        </div>
                        <div class="mb-4">
                            <label for="comment" class="form-label fw-semibold">Your Review</label>
                            <textarea class="form-control" name="comment" id="comment" rows="4" required placeholder="Share your thoughts about the product..."></textarea>
                        </div>
                        <button type="submit" class="btn btn-primary px-4">Submit Review</button>
                    </form>
                </div>
            <% } else { %>
                <p class="text-center text-muted mb-5">You can only review this product after purchasing and receiving it.</p>
            <% } %>
        <% } else { %>
            <p class="text-center mb-5"><a href="/login" class="text-primary">Log in</a> to write a review.</p>
        <% } %>

        <!-- Display Reviews -->
        <div class="reviews-list">
            <% if (reviews && reviews.length > 0) { %>
                <% reviews.forEach(review => { %>
                    <div class="review mb-4 p-4 border rounded bg-white shadow-sm">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <div class="d-flex align-items-center">
                                <div class="reviewer-avatar me-3">
                                    <i class="fas fa-user-circle fa-2x text-muted"></i>
                                </div>
                                <div>
                                    <strong><%= review.userId.name %></strong>
                                    <div class="stars">
                                        <% for (let i = 1; i <= 5; i++) { %>
                                            <i class="fas fa-star <%= i <= review.rating ? 'text-warning' : 'text-muted' %>"></i>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                            <small class="text-muted"><%= new Date(review.createdAt).toLocaleDateString() %></small>
                        </div>
                        <p class="mb-0 text-dark"><%= review.comment %></p>
                    </div>
                <% }); %>
            <% } else { %>
                <p class="text-center text-muted">No reviews yet.</p>
            <% } %>
        </div>
    </div>
</section>
        <!-- Footer Partial -->
        <%- include("../../views/partials/user/footer") %>
    </div>

    <!-- JavaScript Dependencies -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="/js/owl.carousel.min.js"></script>
    <script src="/js/jquery.magnific-popup.min.js"></script>
    <script src="/js/jquery.flexslider-min.js"></script>
    <script src="/js/bootstrap-datepicker.js"></script>
    <script src="/js/main.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script>
       document.addEventListener("DOMContentLoaded", function () {
    const sizeOptions = document.querySelectorAll(".size-option");
    const stockInfo = document.getElementById("stock-info");
    const quantityInput = document.getElementById("quantity");
    const minusBtn = document.querySelector(".quantity-minus");
    const plusBtn = document.querySelector(".quantity-plus");
    const form = document.getElementById("addToCartForm");
    let selectedSize = null;
    const MAX_PER_PRODUCT = 5;

    sizeOptions.forEach((option) => {
      option.addEventListener("click", function () {
        sizeOptions.forEach((opt) => opt.classList.remove("active"));
        this.classList.add("active");
        selectedSize = this.dataset.size;
        const stock = parseInt(this.dataset.stock);

        if (stock <= 0) {
          stockInfo.textContent = "Out of stock";
          quantityInput.value = 0;
          quantityInput.disabled = true;
        } else {
          stockInfo.textContent = `Available stock: ${stock} items`;
          quantityInput.max = Math.min(stock, MAX_PER_PRODUCT);
          quantityInput.value = 1;
          quantityInput.disabled = false;
        }
      });
    });

    minusBtn.addEventListener("click", () => {
      let value = parseInt(quantityInput.value);
      if (value > 1) {
        quantityInput.value = value - 1;
      }
    });

    plusBtn.addEventListener("click", () => {
      let value = parseInt(quantityInput.value);
      let max = parseInt(quantityInput.max);
      if (value < max) {
        quantityInput.value = value + 1;
      } else if (max === MAX_PER_PRODUCT) {
        Swal.fire("Limit Reached", `Maximum ${MAX_PER_PRODUCT} items allowed per product`, "warning");
      } else {
        Swal.fire("Out of Stock", "Cannot add more than available stock", "warning");
      }
    });

    form.addEventListener("submit", async function (e) {
      e.preventDefault();

      if (!selectedSize) {
        Swal.fire("Warning", "Please select a size", "warning");
        return;
      }

      const quantity = parseInt(quantityInput.value);
      const stock = parseInt(document.querySelector(".size-option.active").dataset.stock);
      const productId = form.querySelector("[name='productId']").value;

      if (stock <= 0) {
        Swal.fire("Error", "This item is out of stock", "error");
        return;
      }

      if (quantity <= 0) {
        Swal.fire("Warning", "Please select a valid quantity", "warning");
        return;
      }

      if (quantity > stock) {
        Swal.fire("Error", `Only ${stock} items available in stock`, "error");
        return;
      }

      if (quantity > MAX_PER_PRODUCT) {
        Swal.fire("Error", `Maximum ${MAX_PER_PRODUCT} items allowed per product`, "error");
        return;
      }

      // Check current cart quantity for this product and size
      try {
        const cartResponse = await fetch(`/check-cart-quantity/${productId}/${selectedSize}`, {
          method: "GET",
          headers: { "Content-Type": "application/json" },
        });
        const cartData = await cartResponse.json();

        if (cartData.status) {
          const currentQuantity = cartData.quantity || 0;
          const newTotalQuantity = currentQuantity + quantity;

          if (newTotalQuantity > MAX_PER_PRODUCT) {
            Swal.fire({
              icon: "error",
              title: "Quantity Limit Exceeded",
              text: `You already have ${currentQuantity} of this product in your cart. Maximum limit is ${MAX_PER_PRODUCT}.`,
            });
            return;
          }
        }
      } catch (error) {
        console.error("Error checking cart quantity:", error);
        Swal.fire("Error", "Failed to check cart quantity. Please try again.", "error");
        return;
      }

      const data = {
        productId,
        size: selectedSize,
        quantity,
      };

      try {
        const response = await fetch("/add-to-cart", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
        });
        const result = await response.json();

        if (result.status) {
          Swal.fire({
            title: "Success",
            text: result.message,
            icon: "success",
            confirmButtonText: "OK",
          }).then(() => {
            const newStock = stock - quantity;
            document.querySelector(".size-option.active").dataset.stock = newStock;
            stockInfo.textContent = `Available stock: ${newStock} items`;
            if (newStock <= 0) {
              quantityInput.disabled = true;
              stockInfo.textContent = "Out of stock";
            }
          });
        } else {
          Swal.fire("Error", result.message, "error");
        }
      } catch (error) {
        Swal.fire("Error", "Failed to add to cart. Please try again.", "error");
      }
    });

    quantityInput.addEventListener("change", function () {
      const stock = selectedSize ? parseInt(document.querySelector(".size-option.active").dataset.stock) : 0;
      let value = parseInt(this.value);

      if (isNaN(value) || value < 1) {
        this.value = 1;
        Swal.fire("Warning", "Quantity must be at least 1", "warning");
      } else if (value > stock) {
        this.value = stock;
        Swal.fire("Error", `Only ${stock} items available in stock`, "error");
      } else if (value > MAX_PER_PRODUCT) {
        this.value = MAX_PER_PRODUCT;
        Swal.fire("Error", `Maximum ${MAX_PER_PRODUCT} items allowed per product`, "error");
      }
    });

            // Wishlist Functionality
            async function checkWishlistStatus(productId) {
                try {
                    const response = await fetch('/check-wishlist', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId })
                    });
                    if (!response.ok) {
                        if (response.status === 401) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Login Required',
                                text: 'Please log in to manage your wishlist.',
                                confirmButtonColor: '#46698f'
                            }).then(() => {
                                window.location.href = '/login';
                            });
                            return false;
                        }
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const data = await response.json();
                    console.log('Check wishlist response:', data);
                    if (!data.success) {
                        console.error('Check wishlist failed:', data.message);
                        return false;
                    }
                    return data.isInWishlist || false;
                } catch (error) {
                    console.error('Error checking wishlist status:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to check wishlist status. Please try again.',
                        confirmButtonColor: '#46698f'
                    });
                    return false;
                }
            }

            async function toggleWishlist(productId, event) {
                event.preventDefault();
                const button = event.target.closest('.wishlist-btn');
                console.log('Toggle wishlist clicked for product:', productId);

                try {
                    const isInWishlist = await checkWishlistStatus(productId);
                    console.log('Is in wishlist:', isInWishlist);

                    if (isInWishlist) {
                        Swal.fire({
                            title: 'Remove from Wishlist?',
                            text: "Do you want to remove this item from your wishlist?",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#46698f',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, remove it!'
                        }).then(async (result) => {
                            if (result.isConfirmed) {
                                const response = await fetch('/remove-from-wishlist', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ productId })
                                });
                                const data = await response.json();
                                console.log('Remove from wishlist response:', data);

                                if (data.success) {
                                    button.classList.remove('added');
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Removed',
                                        text: 'Item removed from wishlist!',
                                        confirmButtonColor: '#46698f'
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Failed',
                                        text: data.message || 'Failed to remove from wishlist',
                                        confirmButtonColor: '#46698f'
                                    });
                                }
                            }
                        });
                    } else {
                        const response = await fetch('/add-to-wishlist', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId })
                        });
                        const data = await response.json();
                        console.log('Add to wishlist response:', data);

                        if (data.success) {
                            button.classList.add('added');
                            Swal.fire({
                                icon: 'success',
                                title: 'Added',
                                text: 'Product added to wishlist!',
                                confirmButtonColor: '#46698f'
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed',
                                text: data.message || 'Failed to add to wishlist',
                                confirmButtonColor: '#46698f'
                            });
                        }
                    }
                } catch (error) {
                    console.error('Error toggling wishlist:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Something went wrong. Please try again.',
                        confirmButtonColor: '#46698f'
                    });
                }
            }

            // Initialize wishlist button state on page load
            const productId = '<%= product._id %>';
            checkWishlistStatus(productId).then(isInWishlist => {
                const wishlistBtn = document.querySelector('.wishlist-btn');
                if (wishlistBtn && isInWishlist) {
                    wishlistBtn.classList.add('added');
                }
            });

            // Initialize Owl Carousel for the sale banner
            $('.owl-carousel2').owlCarousel({
                loop: true,
                autoplay: true,
                autoplayTimeout: 3000,
                items: 1,
                dots: false,
                nav: false
            });
        });
       // Review Form Submission
document.getElementById('reviewForm')?.addEventListener('submit', async function (e) {
    e.preventDefault();

    const form = e.target;
    const productId = form.querySelector('[name="productId"]').value;
    const rating = form.querySelector('input[name="rating"]:checked')?.value;
    const comment = form.querySelector('#comment').value.trim();

    if (!rating) {
        Swal.fire('Warning', 'Please select a rating', 'warning');
        return;
    }

    if (!comment) {
        Swal.fire('Warning', 'Please write a review', 'warning');
        return;
    }

    try {
        const response = await fetch('/submit-review', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ productId, rating, comment })
        });
        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: result.message,
                confirmButtonColor: '#46698f'
            }).then(() => {
                window.location.reload(); // Reload to show the new review
            });
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Failed',
                text: result.message,
                confirmButtonColor: '#46698f'
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to submit review. Please try again.',
            confirmButtonColor: '#46698f'
        });
    }
});

// Star Rating Interaction
const starInputs = document.querySelectorAll('.star-rating input');
const starLabels = document.querySelectorAll('.star-rating label i');

starInputs.forEach((input, index) => {
    input.addEventListener('change', () => {
        starLabels.forEach((label, i) => {
            if (i >= starInputs.length - index - 1) {
                label.classList.remove('text-muted');
                label.classList.add('text-warning');
            } else {
                label.classList.remove('text-warning');
                label.classList.add('text-muted');
            }
        });
    });
});
    </script>

    <style>
     .reviews-section {
    background-color: #f8f9fa;
    padding: 60px 0;
}

.reviews-section h3 {
    font-family: 'Montserrat', sans-serif;
    font-weight: 700;
    color: #333;
    margin-bottom: 40px;
}

.average-rating h5 {
    font-size: 1.5rem;
    color: #333;
}

.average-rating .stars i {
    font-size: 1.2rem;
}

.review-form {
    max-width: 700px;
    margin: 0 auto;
    border-radius: 10px;
    background-color: #fff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.review-form h5 {
    font-family: 'Montserrat', sans-serif;
    font-weight: 600;
    color: #333;
}

.review-form .form-label {
    font-size: 1rem;
    color: #555;
}

.star-rating {
    direction: rtl; /* Right to left for star rating */
    font-size: 0;
}

.star-rating input {
    display: none;
}

.star-rating label {
    cursor: pointer;
    font-size: 2rem;
    margin: 0 5px;
}

.star-rating label i {
    transition: color 0.3s ease;
}

.review-form textarea {
    resize: none;
    border-radius: 5px;
    border: 1px solid #ddd;
    padding: 10px;
    font-size: 1rem;
    color: #333;
}

.review-form textarea:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    outline: none;
}

.review-form .btn-primary {
    background-color: #007bff;
    border: none;
    padding: 10px 30px;
    font-size: 1rem;
    font-weight: 500;
    transition: background-color 0.3s ease;
}

.review-form .btn-primary:hover {
    background-color: #0056b3;
}

.reviews-list {
    max-width: 900px;
    margin: 0 auto;
}

.review {
    border-radius: 10px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.review:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
}

.reviewer-avatar i {
    font-size: 2rem;
}

.review strong {
    font-size: 1.1rem;
    color: #333;
}

.review .stars i {
    font-size: 1rem;
}

.review p {
    font-size: 1rem;
    line-height: 1.6;
    color: #555;
}

@media (max-width: 768px) {
    .reviews-section {
        padding: 40px 0;
    }

    .reviews-section h3 {
        font-size: 1.8rem;
    }

    .average-rating h5 {
        font-size: 1.2rem;
    }

    .star-rating label {
        font-size: 1.5rem;
    }

    .review-form {
        padding: 20px;
    }
}
.quantity-control {
    display: flex;
    align-items: center;
    max-width: 180px; /* Slightly wider for better balance */
    margin: 15px 0; /* Adds vertical spacing */
    background-color: #fff; /* White background for contrast */
    border: 1px solid #ddd; /* Light border for definition */
    border-radius: 5px; /* Rounded corners */
    padding: 5px; /* Inner padding */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); /* Subtle shadow */
}

.quantity-control input {
    width: 60px; /* Fixed width for consistency */
    padding: 8px 10px; /* More padding for better touch targets */
    text-align: center;
    border: none; /* Remove default border */
    font-size: 1rem;
    font-weight: 500;
    color: #333;
    background-color: transparent; /* Matches container */
    appearance: textfield; /* Removes default spinner arrows in some browsers */
}

.quantity-control input::-webkit-outer-spin-button,
.quantity-control input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.quantity-control button {
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 5px; /* Matches input rounding */
    padding: 8px 12px; /* Consistent padding with input */
    font-size: 1rem;
    color: #007bff; /* Matches theme color */
    transition: all 0.3s ease; /* Smooth hover transition */
    cursor: pointer;
    outline: none; /* Remove default outline */
}

.quantity-control button:hover {
    background-color: #007bff;
    color: #fff;
    border-color: #007bff;
}

.quantity-control button:disabled {
    cursor: not-allowed;
    opacity: 0.6;
}

.quantity-control .quantity-minus {
    margin-right: 5px; /* Space between minus and input */
}

.quantity-control .quantity-plus {
    margin-left: 5px; /* Space between input and plus */
}
.product-images {
    position: relative;
    padding: 20px;
    background: #fff;
    border-radius: 10px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

#productCarousel .carousel-inner .carousel-item img {
    border-radius: 10px;
    transition: transform 0.3s ease;
}

#productCarousel .carousel-inner .carousel-item:hover img {
    transform: scale(1.05); /* Slight zoom on hover */
}

.carousel-indicators {
    bottom: -30px;
}

.carousel-indicators button {
    width: 12px;
    height: 12px;
    margin: 0 5px;
    background-color: #ccc;
    border: none;
    border-radius: 50%;
    opacity: 0.7;
    transition: opacity 0.3s;
}

.carousel-indicators .active {
    background-color: #007bff;
    opacity: 1;
}

.carousel-control-prev-icon,
.carousel-control-next-icon {
    background-color: #007bff;
    border-radius: 50%;
    padding: 12px;
    transition: background-color 0.3s;
}

.carousel-control-prev-icon:hover,
.carousel-control-next-icon:hover {
    background-color: #0056b3;
}
.product-title {
    font-size: 2rem;
    font-weight: 600;
    color: #333;
    margin-bottom: 15px;
    font-family: 'Montserrat', sans-serif;
}

.mb-3 .text-success {
    font-size: 1.5rem;
    font-weight: 500;
    color: #28a745 !important;
}

.mb-3 strike {
    color: #6c757d;
    font-size: 1.2rem;
    margin-right: 10px;
}

.product-description {
    font-size: 1rem;
    color: #555;
    line-height: 1.6;
    margin-bottom: 20px;
}

.category-info h4 {
    font-size: 1.1rem;
    color: #444;
    font-weight: 500;
    margin-bottom: 15px;
}
.wishlist-btn {
    background-color: rgba(255, 255, 255, 0.9);
    border: 2px solid #ff2020;
    color: #ff2020;
    transition: all 0.3s ease;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
}

.wishlist-btn:hover {
    background-color: #ff2020;
    color: #fff;
    transform: scale(1.1);
}

.wishlist-btn.added {
    background-color: #ff2020;
    color: #fff;
}

.wishlist-btn .icon-heart-o::before {
    font-size: 20px;
}
.section {
    padding: 40px 0;
}

.row {
    align-items: stretch;
}

.col-lg-6 {
    display: flex;
    flex-direction: column;
    justify-content: center;
}

@media (max-width: 768px) {
    .product-title {
        font-size: 1.5rem;
    }
    .mb-3 .text-success {
        font-size: 1.2rem;
    }
    .product-images {
        padding: 10px;
    }
    .add-to-cart-btn {
        padding: 10px 20px;
        font-size: 1rem;
    }
}

.size-option {
            cursor: pointer;
            padding: 5px 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .size-option:hover {
            background-color: #e9ecef;
        }
        .size-option.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }

        /* Quantity Control Styling */
        .quantity-control input {
            width: 50px;
            text-align: center;
        }

        /* Wishlist Button Styling */
        .wishlist-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(255, 255, 255, 0.8);
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.3s, color 0.3s;
            z-index: 10;
        }
        .wishlist-btn:hover {
            background: rgba(255, 255, 255, 1);
            color: #ff2020;
        }
        .wishlist-btn .icon-heart-o::before {
            content: "\2661";
            font-size: 18px;
        }
        .wishlist-btn.added .icon-heart-o::before {
            content: "\2665";
            color: #ff2020;
        }

        /* Carousel Styling */
        .carousel-item {
            position: relative;
        }
        .carousel-indicators button {
            background-color: #000;
            width: 10px;
            height: 10px;
            border-radius: 50%;
        }
        .carousel-indicators .active {
            background-color: #007bff;
        }
        .carousel-control-prev,
        .carousel-control-next {
            width: 5%;
            opacity: 0.8;
        }
        .carousel-control-prev-icon,
        .carousel-control-next-icon {
            background-color: #000;
            border-radius: 50%;
            padding: 10px;
        }
    </style>
</body>
</html>