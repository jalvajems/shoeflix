<!DOCTYPE HTML>
<html lang="en">
<head>
    <title>Footwear - Shoeflix</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;500;600;700&family=Rokkitt:wght@100;300;400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <link rel="stylesheet" href="/css/productdetail.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
    <div id="page">
        <nav class="navbar navbar-expand-lg navbar-light bg-white py-3 shadow-sm">
            <div class="container">
                <a class="navbar-brand brand-logo" href="/">Shoeflix</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarContent">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarContent">
                    <ul class="navbar-nav me-auto">
                        <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
                        <li class="nav-item"><a class="nav-link" href="/shop">Shop</a></li>
                    </ul>
                    <div class="d-flex align-items-center">
                        <a href="/cart" class="btn btn-sm btn-outline-dark"><i class="fas fa-shopping-cart me-1"></i> Cart</a>
                    </div>
                </div>
            </div>
        </nav>

        <div class="bg-light py-2 breadcrumbs">
            <div class="container">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb mb-0">
                        <li class="breadcrumb-item"><a href="/">Home</a></li>
                        <li class="breadcrumb-item active">Product Details</li>
                    </ol>
                </nav>
            </div>
        </div>

        <section class="py-5">
            <div class="container">
                <div class="row">
                    <div class="col-lg-6 product-images">
                        <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
                            <div class="carousel-indicators">
                                <% for(let i = 0; i < product.productImage.length; i++) { %>
                                    <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="<%= i %>" 
                                        class="<%= i === 0 ? 'active' : '' %>"></button>
                                <% } %>
                            </div>
                            <div class="carousel-inner">
                                <% product.productImage.forEach((image, index) => { %>
                                    <div class="carousel-item <%= index === 0 ? 'active' : '' %>">
                                        <img src="/uploads/product-images/<%= image %>" class="d-block w-100 product-img" alt="<%= product.productName %>">
                                    </div>
                                <% }); %>
                            </div>
                            <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                                <span class="carousel-control-prev-icon"></span>
                            </button>
                            <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                                <span class="carousel-control-next-icon"></span>
                            </button>
                        </div>
                    </div>

                    <div class="col-lg-6">
                        <h2 class="product-title mb-3"><%= product.productName %></h2>
                        <div class="mb-3 d-flex align-items-center gap-3 flex-wrap">
                            <h3 class="me-3 mb-0 text-success">₹<%= product.salePrice %></h3>
                            <strike><h4 class="me-3 mb-0 text-muted">₹<%= product.regularPrice %></h4></strike>
                        </div>
                        <p><%= product.description %></p>
                        <div><h4>Category: <%= category.name %></h4></div>

                        <div class="mb-4">
                            <h5>Size</h5>
                            <div class="sizes mb-3 d-flex flex-wrap gap-2">
                                <% product.variants.forEach(variant => { %>
                                    <div class="size-option" data-size="<%= variant.size %>" data-stock="<%= variant.quantity %>">
                                        <%= variant.size %>
                                    </div>
                                <% }); %>
                            </div>
                            <div id="stock-info" class="text-muted">Select a size to see available stock</div>
                        </div>

                        <div class="mb-4">
                            <h5>Quantity</h5>
                            <div class="quantity-control d-flex align-items-center">
                                <button class="quantity-minus btn btn-sm btn-outline-secondary"><i class="fas fa-minus"></i></button>
                                <input type="number" id="quantity" name="quantity" value="1" min="1" max="5" class="form-control mx-2">
                                <button class="quantity-plus btn btn-sm btn-outline-secondary"><i class="fas fa-plus"></i></button>
                            </div>
                        </div>

                        <div class="mb-4">
                            <form id="addToCartForm">
                                <input type="hidden" name="productId" value="<%= product._id %>">
                                <button type="submit" class="add-to-cart-btn btn btn-primary">
                                    <i class="fas fa-shopping-cart me-2"></i> Add to Cart
                                </button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", function() {
          const sizeOptions = document.querySelectorAll(".size-option");
          const stockInfo = document.getElementById("stock-info");
          const quantityInput = document.getElementById("quantity");
          const minusBtn = document.querySelector(".quantity-minus");
          const plusBtn = document.querySelector(".quantity-plus");
          const form = document.getElementById("addToCartForm");
          let selectedSize = null;
          const MAX_PER_PRODUCT = 5; // Maximum allowed quantity per product
      
          // Size selection handling
          sizeOptions.forEach(option => {
              option.addEventListener("click", function() {
                  sizeOptions.forEach(opt => opt.classList.remove("active"));
                  this.classList.add("active");
                  selectedSize = this.dataset.size;
                  const stock = parseInt(this.dataset.stock);
                  
                  // Update stock info display
                  if (stock <= 0) {
                      stockInfo.textContent = "Out of stock";
                      quantityInput.value = 0;
                      quantityInput.disabled = true;
                  } else {
                      stockInfo.textContent = `Available stock: ${stock} items`;
                      quantityInput.max = Math.min(stock, MAX_PER_PRODUCT);
                      quantityInput.value = 1;
                      quantityInput.disabled = false;
                  }
              });
          });
      
          // Quantity controls
          minusBtn.addEventListener("click", () => {
              let value = parseInt(quantityInput.value);
              if (value > 1) {
                  quantityInput.value = value - 1;
              }
          });
      
          plusBtn.addEventListener("click", () => {
              let value = parseInt(quantityInput.value);
              let max = parseInt(quantityInput.max);
              if (value < max) {
                  quantityInput.value = value + 1;
              } else if (max === MAX_PER_PRODUCT) {
                  Swal.fire("Limit Reached", `Maximum ${MAX_PER_PRODUCT} items allowed per product`, "warning");
              } else {
                  Swal.fire("Out of Stock", "Cannot add more than available stock", "warning");
              }
          });
      
          // Form submission handling
          form.addEventListener("submit", async function(e) {
              e.preventDefault();
      
              if (!selectedSize) {
                  Swal.fire("Warning", "Please select a size", "warning");
                  return;
              }
      
              const quantity = parseInt(quantityInput.value);
              const stock = parseInt(document.querySelector(".size-option.active").dataset.stock);
      
              // Validation checks
              if (stock <= 0) {
                  Swal.fire("Error", "This item is out of stock", "error");
                  return;
              }
      
              if (quantity <= 0) {
                  Swal.fire("Warning", "Please select a valid quantity", "warning");
                  return;
              }
      
              if (quantity > stock) {
                  Swal.fire("Error", `Only ${stock} items available in stock`, "error");
                  return;
              }
      
              if (quantity > MAX_PER_PRODUCT) {
                  Swal.fire("Error", `Maximum ${MAX_PER_PRODUCT} items allowed per product`, "error");
                  return;
              }
      
              const data = {
                  productId: form.querySelector("[name='productId']").value,
                  size: selectedSize,
                  quantity: quantity
              };
      
              try {
                  const response = await fetch("/add-to-cart", {
                      method: "POST",
                      headers: { "Content-Type": "application/json" },
                      body: JSON.stringify(data)
                  });
                  const result = await response.json();
      
                  if (result.status) {
                      Swal.fire({
                          title: "Success",
                          text: result.message,
                          icon: "success",
                          confirmButtonText: "OK"
                      }).then(() => {
                          // Optional: Update stock display after successful addition
                          const newStock = stock - quantity;
                          document.querySelector(".size-option.active").dataset.stock = newStock;
                          stockInfo.textContent = `Available stock: ${newStock} items`;
                          if (newStock <= 0) {
                              quantityInput.disabled = true;
                              stockInfo.textContent = "Out of stock";
                          }
                      });
                  } else {
                      Swal.fire("Error", result.message, "error");
                  }
              } catch (error) {
                  Swal.fire("Error", "Failed to add to cart. Please try again.", "error");
              }
          });
      
          // Input validation for manual entry
          quantityInput.addEventListener("change", function() {
              const stock = selectedSize ? parseInt(document.querySelector(".size-option.active").dataset.stock) : 0;
              let value = parseInt(this.value);
              
              if (isNaN(value) || value < 1) {
                  this.value = 1;
                  Swal.fire("Warning", "Quantity must be at least 1", "warning");
              } else if (value > stock) {
                  this.value = stock;
                  Swal.fire("Error", `Only ${stock} items available in stock`, "error");
              } else if (value > MAX_PER_PRODUCT) {
                  this.value = MAX_PER_PRODUCT;
                  Swal.fire("Error", `Maximum ${MAX_PER_PRODUCT} items allowed per product`, "error");
              }
          });
      });
      </script>
    <style>
        .size-option {
            cursor: pointer;
            padding: 5px 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        .size-option.active {
            background-color: #007bff;
            color: white;
            border-color: #007bff;
        }
        .quantity-control input {
            width: 50px;
            text-align: center;
        }
    </style>
</body>
</html>