<%- include("../../views/partials/user/header") %>

<style>
    .breadcrumbs, .colorlib-product {
        padding: 20px 0;
    }

    .process-wrap {
        display: flex;
        justify-content: space-around;
        margin-bottom: 30px;
    }

    .process {
        flex: 1;
        padding: 10px;
        border-bottom: 2px solid #ddd;
    }

    .process.active {
        border-bottom: 2px solid #28a745;
        font-weight: bold;
    }

    .product-name, .product-cart {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 0;
        border-bottom: 1px solid #eee;
    }

    .one-forth, .one-eight {
        flex: 1;
        text-align: center;
        padding: 0 10px;
    }

    .one-forth {
        text-align: left;
        display: flex;
        align-items: center;
    }

    .product-img {
        width: 100px;
        height: 100px;
        background-size: cover;
        background-position: center;
        margin-right: 10px;
    }

    .quantity-control {
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .quantity-control button, .quantity-input {
        margin: 0 5px;
        padding: 5px;
        width: 40px;
        text-align: center;
    }

    .total-wrap {
        margin-top: 20px;
        border: 1px solid #eee;
        padding: 15px;
        background: #f9f9f9;
    }

    .btn-primary {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
    }

    .btn-primary:hover {
        background-color: #218838;
    }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
    }

    .btn-danger:hover {
        background-color: #c82333;
    }

    @media (max-width: 768px) {
        .product-name, .product-cart {
            flex-direction: column;
            text-align: left;
        }

        .one-forth, .one-eight {
            width: 100%;
            margin-bottom: 10px;
        }

        .total-wrap {
            margin-top: 20px;
        }
    }
</style>

<div class="breadcrumbs">
    <div class="container">
        <div class="row">
            <div class="col">
                <p class="bread"><span><a href="/">Home</a></span> / <span>Shopping Cart</span></p>
            </div>
        </div>
    </div>
</div>

<div class="colorlib-product">
    <div class="container">
        <div class="row row-pb-lg">
            <div class="col-md-10 offset-md-1">
                <div class="process-wrap">
                    <div class="process text-center active">
                        <p><span>01</span></p>
                        <h3>Shopping Cart</h3>
                    </div>
                    <div class="process text-center">
                        <p><span>02</span></p>
                        <h3>Checkout</h3>
                    </div>
                    <div class="process text-center">
                        <p><span>03</span></p>
                        <h3>Order Complete</h3>
                    </div>
                </div>
            </div>
        </div>

        <div class="row row-pb-lg">
            <div class="col-md-12">
                <% if(cart && cart.length > 0) { %>
                    <div class="product-name d-flex">
                        <div class="one-forth text-left px-4">
                            <span>Product Details</span>
                        </div>
                        <div class="one-eight text-center">
                            <span>Size</span>
                        </div>
                        <div class="one-eight text-center">
                            <span>Price</span>
                        </div>
                        <div class="one-eight text-center">
                            <span>Quantity</span>
                        </div>
                        <div class="one-eight text-center">
                            <span>Total</span>
                        </div>
                        <div class="one-eight text-center">
                            <span>Remove</span>
                        </div>
                    </div>
                    
                    <% cart.forEach(function(item) { %>
                        <div class="product-cart d-flex" data-cart-item-id="<%= item._id %>">
                            <div class="one-forth">
                                <div class="product-img" style="background-image: url(/uploads/product-images/<%=item.productId.productImage[0]%>);"></div>
                                <div class="display-tc">
                                    <h3><%= item.productId.productName %></h3>
                                </div>
                            </div>
                            <div class="one-eight text-center">
                                <span><%= item.size || "Size not set" %></span>
                            </div>
                            <div class="one-eight text-center">
                                <span>₹<%= item.price %></span>
                            </div>
                            <div class="one-eight text-center">
                                <div class="quantity-control">
                                    <button class="btn btn-sm btn-outline-secondary quantity-minus">-</button>
                                    <input type="number" value="<%= item.quantity %>" min="1" max="5" class="form-control quantity-input">
                                    <button class="btn btn-sm btn-outline-secondary quantity-plus">+</button>
                                </div>
                            </div>
                            <div class="one-eight text-center">
                                <span>₹<%= item.totalPrice %></span>
                            </div>
                            <div class="one-eight text-center">
                                <button class="btn btn-sm btn-danger remove-item">X</button>
                            </div>
                        </div>
                    <% }); %>

                    <div class="row row-pb-lg">
                        <div class="col-md-12">
                            <div class="total-wrap">
                                <div class="row">
                                    <div class="col-sm-8">
                                        <p><a href="/shop" class="btn btn-primary">Continue Shopping</a></p>
                                    </div>
                                    <div class="col-sm-4 text-center">
                                        <div class="total">
                                            <div class="sub">
                                                <p><span>Subtotal:</span> <span>₹<%= totalPrice !== undefined ? totalPrice : '0' %></span></p>
                                            </div>
                                            <div class="grand-total">
                                                <p><span><strong>Total:</strong></span> <span><strong>₹<%= totalPrice !== undefined ? totalPrice : '0' %></strong></span></p>
                                            </div>
                                            <p><a href="/checkout" class="btn btn-primary">Proceed to Checkout</a></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } else { %>
                    <div class="row">
                        <div class="col-md-12 text-center">
                            <div class="empty-cart-message" style="padding: 50px 0;">
                                <i class="fa fa-shopping-cart" style="font-size: 60px; color: #ddd;"></i>
                                <h2 style="margin-top: 20px;">Your cart is empty</h2>
                                <p>Looks like you haven't added anything to your cart yet.</p>
                                <a href="/shop" class="btn btn-primary mt-3">Continue Shopping</a>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<%- include("../../views/partials/user/footer") %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Quantity controls
        document.querySelectorAll(".quantity-minus").forEach(btn => {
            btn.addEventListener("click", async function() {
                const cartItemId = this.closest(".product-cart").dataset.cartItemId;
                const input = this.nextElementSibling;
                let quantity = parseInt(input.value);
                if (quantity > 1) {
                    quantity--;
                    updateQuantity(cartItemId, quantity, input);
                }
            });
        });

        document.querySelectorAll(".quantity-plus").forEach(btn => {
            btn.addEventListener("click", async function() {
                const cartItemId = this.closest(".product-cart").dataset.cartItemId;
                const input = this.previousElementSibling;
                let quantity = parseInt(input.value);
                if (quantity < 5) {
                    quantity++;
                    updateQuantity(cartItemId, quantity, input);
                }
            });
        });

        document.querySelectorAll(".quantity-input").forEach(input => {
            input.addEventListener("change", function() {
                const cartItemId = this.closest(".product-cart").dataset.cartItemId;
                let quantity = parseInt(this.value);
                if (quantity >= 1 && quantity <= 5) {
                    updateQuantity(cartItemId, quantity, this);
                } else {
                    this.value = Math.max(1, Math.min(5, quantity));
                }
            });
        });

        async function updateQuantity(cartItemId, quantity, input) {
            try {
                console.log("Updating cart item:", cartItemId, "to quantity:", quantity);
                const response = await fetch(`/update-cart/${cartItemId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ quantity, cartItemId })
                });
                const data = await response.json();
                console.log("Response data:", data);
                
                if (data.status) {
                    if (data.removed) {
                        input.closest(".product-cart").remove();
                        updateTotal();
                        Swal.fire({
                            title: "Success",
                            text: "Item removed from cart",
                            icon: "success",
                            confirmButtonColor: "#28a745"
                        });
                    } else {
                        input.value = data.quantity;
                        const itemTotalElement = input.closest(".product-cart").querySelector(".one-eight:nth-child(5) span");
                        if (itemTotalElement) {
                            itemTotalElement.textContent = `₹${data.itemTotal}`;
                        }
                        updateTotal();
                    }
                } else {
                    Swal.fire({
                        title: "Error",
                        text: data.message || "Failed to update cart",
                        icon: "error",
                        confirmButtonColor: "#dc3545"
                    });
                }
            } catch (error) {
                console.error("Error updating quantity:", error);
                Swal.fire({
                    title: "Error",
                    text: "Failed to update quantity",
                    icon: "error",
                    confirmButtonColor: "#dc3545"
                });
            }
        }

        function updateTotal() {
            try {
                const totalElements = document.querySelectorAll(".product-cart .one-eight:nth-child(5) span");
                const totals = Array.from(totalElements)
                    .map(span => parseFloat(span.textContent.replace("₹", "")) || 0);
                const total = totals.reduce((acc, val) => acc + val, 0);

                const subtotalElement = document.querySelector(".sub span:last-child");
                const grandTotalElement = document.querySelector(".grand-total span:last-child strong");

                if (subtotalElement && grandTotalElement) {
                    subtotalElement.textContent = `₹${total.toFixed(2)}`; // Ensure 2 decimal places
                    grandTotalElement.textContent = `₹${total.toFixed(2)}`;
                }

                if (totals.length === 0) {
                    location.reload();
                }
            } catch (error) {
                console.error("Error updating total:", error);
                Swal.fire({
                    title: "Error",
                    text: "Failed to update cart totals",
                    icon: "error",
                    confirmButtonColor: "#dc3545"
                });
            }
        }

        // Remove item with confirmation
        document.querySelectorAll(".remove-item").forEach(btn => {
            btn.addEventListener("click", async function() {
                const cartItemId = this.closest(".product-cart").dataset.cartItemId;

                // Show SweetAlert2 confirmation dialog
                const result = await Swal.fire({
                    title: "Are you sure?",
                    text: "Do you want to remove this item from your cart?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#dc3545",
                    cancelButtonColor: "#6c757d",
                    confirmButtonText: "Yes, remove it!",
                    cancelButtonText: "Cancel"
                });

                // Proceed only if the user confirms
                if (result.isConfirmed) {
                    try {
                        const response = await fetch(`/remove-from-cart/${cartItemId}`, {
                            method: "DELETE",
                            headers: { "Content-Type": "application/json" }
                        });

                        const data = await response.json();

                        if (data.status) {
                            // Remove the item from the DOM
                            this.closest(".product-cart").remove();
                            // Update the total price
                            updateTotal();
                            // Show success message
                            Swal.fire({
                                title: "Success",
                                text: "Item removed from cart",
                                icon: "success",
                                confirmButtonColor: "#28a745"
                            });
                        } else {
                            // Show error message if the removal failed
                            Swal.fire({
                                title: "Error",
                                text: data.message || "Failed to remove item",
                                icon: "error",
                                confirmButtonColor: "#dc3545"
                            });
                        }
                    } catch (error) {
                        console.error("Error removing item:", error);
                        // Show error message if the request fails
                        Swal.fire({
                            title: "Error",
                            text: "Failed to remove item due to a server error",
                            icon: "error",
                            confirmButtonColor: "#dc3545"
                        });
                    }
                }
            });
        });
    });
</script>