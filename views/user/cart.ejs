<!-- cart.ejs -->
<%- include("../../views/partials/user/header") %>

<style>
    /* Modern Shopping Cart Styling */
    .breadcrumbs {
        padding: 15px 0;
        background-color: #f8f9fa;
        border-bottom: 1px solid #eaecef;
    }

    .breadcrumbs .bread {
        font-size: 14px;
        color: #6c757d;
    }

    .breadcrumbs a {
        color: #28a745;
        transition: color 0.3s;
    }

    .breadcrumbs a:hover {
        color: #218838;
        text-decoration: none;
    }

    .colorlib-product {
        padding: 40px 0;
        background-color: #fff;
    }

    /* Process Steps */
    .process-wrap {
        display: flex;
        justify-content: space-around;
        margin-bottom: 50px;
        position: relative;
    }

    .process-wrap:after {
        content: '';
        position: absolute;
        top: 25px;
        left: 0;
        width: 100%;
        height: 2px;
        background: #eaecef;
        z-index: 0;
    }

    .process {
        position: relative;
        z-index: 1;
        text-align: center;
        width: 33.33%;
    }

    .process p {
        margin-bottom: 0;
    }

    .process p span {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 50px;
        height: 50px;
        background: #fff;
        border: 2px solid #eaecef;
        border-radius: 50%;
        font-weight: 600;
        font-size: 18px;
        color: #6c757d;
        margin: 0 auto 10px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        transition: all 0.3s ease;
    }

    .process h3 {
        font-size: 16px;
        font-weight: 600;
        margin-top: 10px;
        color: #6c757d;
    }

    .process.active p span {
        background: #28a745;
        color: #fff;
        border-color: #28a745;
    }

    .process.active h3 {
        color: #28a745;
        font-weight: 700;
    }

    /* Cart Table */
    .product-name {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background-color: #f8f9fa;
        border-radius: 8px 8px 0 0;
        margin-bottom: 5px;
        font-weight: 600;
        box-shadow: 0 1px 3px rgba(0,0,0,0.05);
    }

    .product-cart {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px 15px;
        border-bottom: 1px solid #eaecef;
        transition: all 0.3s ease;
    }

    .product-cart:hover {
        background-color: #f8f9fa;
    }

    .product-cart:last-child {
        border-bottom: none;
        border-radius: 0 0 8px 8px;
    }

    .one-forth, .one-eight {
        flex: 1;
        text-align: center;
        padding: 0 10px;
    }

    .one-forth {
        flex: 2;
        text-align: left;
        display: flex;
        align-items: center;
    }

    .product-img {
        width: 100px;
        height: 100px;
        background-size: cover;
        background-position: center;
        margin-right: 15px;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }

    .display-tc h3 {
        font-size: 16px;
        margin: 0;
        font-weight: 600;
        color: #343a40;
    }

    /* Quantity Controls */
    .quantity-control {
        display: flex;
        justify-content: center;
        align-items: center;
        border: 1px solid #eaecef;
        border-radius: 25px;
        overflow: hidden;
        background: #fff;
    }

    .quantity-control button {
        background: transparent;
        border: none;
        width: 40px;
        height: 36px;
        font-size: 18px;
        cursor: pointer;
        color: #6c757d;
        transition: all 0.2s;
    }

    .quantity-control button:hover {
        background-color: #f8f9fa;
        color: #28a745;
    }

    .quantity-input {
        width: 40px;
        height: 36px;
        text-align: center;
        border: none;
        background: transparent;
        font-weight: 600;
        font-size: 15px;
        -moz-appearance: textfield;
    }

    .quantity-input::-webkit-outer-spin-button,
    .quantity-input::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
    }

    /* Total Section */
    .total-wrap {
        margin-top: 30px;
        border: 1px solid #eaecef;
        border-radius: 8px;
        padding: 25px;
        background: #fff;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .sub, .grand-total {
        display: flex;
        justify-content: space-between;
        padding: 10px 0;
    }

    .sub {
        border-bottom: 1px dashed #eaecef;
        color: #6c757d;
    }

    .grand-total {
        font-size: 18px;
        color: #343a40;
    }

    /* Buttons */
    .btn-primary {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 5px;
        font-weight: 600;
        transition: all 0.3s ease;
        box-shadow: 0 2px 5px rgba(40, 167, 69, 0.2);
    }

    .btn-primary:hover {
        background-color: #218838;
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
    }

    .btn-danger {
        background-color: transparent;
        color: #dc3545;
        border: 1px solid #dc3545;
        padding: 8px 12px;
        border-radius: 5px;
        transition: all 0.3s ease;
    }

    .btn-danger:hover {
        background-color: #dc3545;
        color: white;
    }

    /* Empty Cart */
    .empty-cart-message {
        padding: 80px 0;
        text-align: center;
    }

    .empty-cart-message i {
        font-size: 80px;
        color: #eaecef;
        margin-bottom: 20px;
    }

    .empty-cart-message h2 {
        font-size: 24px;
        color: #343a40;
        margin-bottom: 15px;
    }

    .empty-cart-message p {
        font-size: 16px;
        color: #6c757d;
        margin-bottom: 30px;
    }

    /* Responsive */
    @media (max-width: 992px) {
        .process-wrap {
            margin-bottom: 30px;
        }
        
        .process p span {
            width: 40px;
            height: 40px;
            font-size: 16px;
        }
        
        .process h3 {
            font-size: 14px;
        }
    }

    @media (max-width: 768px) {
        .product-name {
            display: none;
        }
        
        .product-cart {
            flex-direction: column;
            padding: 20px;
            margin-bottom: 15px;
            border: 1px solid #eaecef;
            border-radius: 8px;
        }
        
        .one-forth, .one-eight {
            width: 100%;
            margin-bottom: 15px;
            text-align: left;
            position: relative;
        }
        
        .one-forth {
            margin-bottom: 20px;
        }
        
        .one-eight {
            padding-left: 115px;
            min-height: 40px;
        }
        
        .one-eight:before {
            content: attr(data-title);
            position: absolute;
            left: 0;
            width: 100px;
            font-weight: 600;
            color: #6c757d;
        }
        
        .product-img {
            width: 100px;
            height: 100px;
        }
        
        .quantity-control {
            justify-content: flex-start;
        }
        
        .one-eight:last-child {
            text-align: right;
            padding-right: 0;
        }
    }
</style>

<div class="breadcrumbs">
    <div class="container">
        <div class="row">
            <div class="col">
                <p class="bread"><span><a href="/">Home</a></span> / <span>Shopping Cart</span></p>
            </div>
        </div>
    </div>
</div>

<div class="colorlib-product">
    <div class="container">


        <div class="row">
            <div class="col-md-12">
                <% if(cart && cart.length > 0) { %>
                    <div class="product-name d-flex">
                        <div class="one-forth text-left px-4">
                            <span>Product Details</span>
                        </div>
                        <div class="one-eight text-center" data-title="Size">
                            <span>Size</span>
                        </div>
                        <div class="one-eight text-center" data-title="Price">
                            <span>Price</span>
                        </div>
                        <div class="one-eight text-center" data-title="Quantity">
                            <span>Quantity</span>
                        </div>
                        <div class="one-eight text-center" data-title="Total">
                            <span>Total</span>
                        </div>
                        <div class="one-eight text-center" data-title="Remove">
                            <span>Remove</span>
                        </div>
                    </div>
                    
                    <% cart.forEach(function(item) { %>
                        <div class="product-cart d-flex" data-cart-item-id="<%= item._id %>" data-product-id="<%= item.productId._id %>">
                            <div class="one-forth">
                                <div class="product-img" style="background-image: url(/uploads/product-images/<%=item.productId.productImage[0]%>);"></div>
                                <div class="display-tc">
                                    <h3><%= item.productId.productName %></h3>
                                </div>
                            </div>
                            <div class="one-eight text-center" data-title="Size">
                                <span><%= item.size || "Size not set" %></span>
                            </div>
                            <div class="one-eight text-center" data-title="Price">
                                <span>â‚¹<%= item.price %></span>
                            </div>
                            <div class="one-eight text-center" data-title="Quantity">
                                <div class="quantity-control">
                                    <button class="quantity-minus">-</button>
                                    <input type="number" value="<%= item.quantity %>" min="1" class="quantity-input">
                                    <button class="quantity-plus">+</button>
                                </div>
                            </div>
                            <div class="one-eight text-center" data-title="Total">
                                <span>â‚¹<%= item.totalPrice.toFixed(2) %></span>
                            </div>
                            <div class="one-eight text-center" data-title="Remove">
                                <button class="btn btn-sm btn-danger remove-item">Ã—</button>
                            </div>
                        </div>
                    <% }); %>

                    <div class="row mt-5">
                        <div class="col-md-12">
                            <div class="total-wrap">
                                <div class="row">
                                    <div class="col-lg-8 col-md-7">
                                        <p><a href="/shop" class="btn btn-primary">Continue Shopping</a></p>
                                    </div>
                                    <div class="col-lg-4 col-md-5">
                                        <div class="total">
                                            <div class="sub">
                                                <p><span>Subtotal:</span> <span>â‚¹<%= totalPrice !== undefined ? totalPrice : '0' %></span></p>
                                            </div>
                                            <div class="grand-total">
                                                <p><span><strong>Total:</strong></span> <span><strong>â‚¹<%= totalPrice !== undefined ? totalPrice : '0' %></strong></span></p>
                                            </div>
                                            <p class="text-center mt-4"><a href="#" id="proceedToCheckout" class="btn btn-primary btn-block">Proceed to Checkout</a></p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% } else { %>
                    <div class="row">
                        <div class="col-md-12">
                            <div class="empty-cart-message">
                                <i class="fa fa-shopping-cart"></i>
                                <h2>Your cart is empty</h2>
                                <p>Looks like you haven't added anything to your cart yet.</p>
                                <a href="/shop" class="btn btn-primary">Continue Shopping</a>
                            </div>
                        </div>
                    </div>
                <% } %>
            </div>
        </div>
    </div>
</div>

<%- include("../../views/partials/user/footer") %>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const MAX_PER_PRODUCT = 5;

        // Function to check available stock
        async function checkStock(productId, size, currentQuantity) {
            try {
                const response = await fetch(`/check-stock/${productId}/${size}`);
                const data = await response.json();
                if (data.status) {
                    return data.availableStock;
                }
                return 0;
            } catch (error) {
                console.error("Error checking stock:", error);
                return 0;
            }
        }

        // Quantity controls
        document.querySelectorAll(".quantity-minus, .quantity-plus").forEach((btn) => {
            btn.addEventListener("click", function() {
                const cartItemId = this.closest(".product-cart").dataset.cartItemId;
                const input = this.nextElementSibling;
                let quantity = parseInt(input.value);
                if (quantity > 1) {
                    quantity--;
                    updateQuantity(cartItemId, quantity, input);
                }
                this.blur();

            });
        });
        document.addEventListener("click", function() {
    if (document.activeElement instanceof HTMLButtonElement) {
        document.activeElement.blur();
    }
});

        document.querySelectorAll(".quantity-plus").forEach((btn) => {
            btn.addEventListener("click", async function () {
                const cartItemId = this.closest(".product-cart").dataset.cartItemId;
                const productId = this.closest(".product-cart").dataset.productId;
                const input = this.previousElementSibling;
                const sizeElement = this.closest(".product-cart").querySelector(".one-eight:nth-child(2) span");
                const size = sizeElement.textContent;
                let quantity = parseInt(input.value);

                // Check available stock before increasing
                const availableStock = await checkStock(productId, size, quantity);
                
                if (quantity < MAX_PER_PRODUCT && quantity < availableStock) {
                    quantity++;
                    updateQuantity(cartItemId, quantity, input);
                } else {
                    let message = quantity >= MAX_PER_PRODUCT 
                        ? `Maximum quantity limit of ${MAX_PER_PRODUCT} reached for this product.`
                        : `Insufficient stock. Only ${availableStock} items available.`;
                    
                    Toastify({
                        text: message,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#ff4444",
                    }).showToast();
                }
            });
        });

        document.querySelectorAll(".quantity-input").forEach((input) => {
            input.addEventListener("change", async function () {
                const cartItemId = this.closest(".product-cart").dataset.cartItemId;
                const productId = this.closest(".product-cart").dataset.productId;
                const sizeElement = this.closest(".product-cart").querySelector(".one-eight:nth-child(2) span");
                const size = sizeElement.textContent;
                let quantity = parseInt(this.value);
                
                const availableStock = await checkStock(productId, size, 0);
                
                if (quantity >= 1 && quantity <= Math.min(MAX_PER_PRODUCT, availableStock)) {
                    updateQuantity(cartItemId, quantity, this);
                } else {
                    this.value = Math.max(1, Math.min(MAX_PER_PRODUCT, availableStock));
                    let message = quantity > MAX_PER_PRODUCT 
                        ? `Maximum quantity limit of ${MAX_PER_PRODUCT} reached for this product.`
                        : `Insufficient stock. Only ${availableStock} items available.`;
                    
                    Toastify({
                        text: message,
                        duration: 3000,
                        gravity: "top",
                        position: "right",
                        backgroundColor: "#ff4444",
                    }).showToast();
                }
            });
        });

        async function updateQuantity(cartItemId, quantity, input) {
            try {
                const response = await fetch(`/update-cart/${cartItemId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ quantity, cartItemId }),
                });
                const data = await response.json();

                if (data.status) {
                    input.value = data.quantity;
                    const itemTotalElement = input.closest(".product-cart").querySelector(".one-eight:nth-child(5) span");
                    if (itemTotalElement) {
                        itemTotalElement.textContent = `â‚¹${data.itemTotal}`;
                    }
                    updateTotal();
                } else {
                    Swal.fire("Error", data.message || "Failed to update cart", "error");
                    input.value = input.defaultValue;
                }
            } catch (error) {
                console.error("Error updating quantity:", error);
                Swal.fire("Error", "Failed to update quantity", "error");
            }
        }

        function updateTotal() {
            try {
                const totalElements = document.querySelectorAll(".product-cart .one-eight:nth-child(5) span");
                const totals = Array.from(totalElements).map((span) => parseFloat(span.textContent.replace("â‚¹", "")) || 0);
                const total = totals.reduce((acc, val) => acc + val, 0);

                const subtotalElement = document.querySelector(".sub span:last-child");
                const grandTotalElement = document.querySelector(".grand-total span:last-child strong");

                if (subtotalElement && grandTotalElement) {
                    subtotalElement.textContent = `â‚¹${total}`;
                    grandTotalElement.textContent = `â‚¹${total}`;
                }

                if (totals.length === 0) {
                    location.reload();
                }
            } catch (error) {
                console.error("Error updating total:", error);
            }
        }

        document.querySelectorAll(".remove-item").forEach((btn) => {
            btn.addEventListener("click", async function () {
                const cartItemId = this.closest(".product-cart").dataset.cartItemId;
                try {
                    const response = await fetch(`/remove-from-cart/${cartItemId}`, {
                        method: "DELETE",
                    });
                    const data = await response.json();

                    if (data.status) {
                        this.closest(".product-cart").remove();
                        updateTotal();
                        Swal.fire("Success", "Item removed from cart", "success");
                    } else {
                        Swal.fire("Error", data.message, "error");
                    }
                } catch (error) {
                    Swal.fire("Error", "Failed to remove item", "error");
                }
            });
        });

        document.getElementById("proceedToCheckout").addEventListener("click", async function (e) {
            e.preventDefault();

            try {
                const response = await fetch("/validate-cart-for-checkout", {
                    method: "GET",
                    headers: { "Content-Type": "application/json" },
                });
                const data = await response.json();

                if (data.status) {
                    window.location.href = "/checkout";
                } else {
                    if (data.unavailableItems && data.unavailableItems.length > 0) {
                        const unavailableList = data.unavailableItems
                            .map((item) => `<li>${item.name}: ${item.reason}</li>`)
                            .join("");
                        Swal.fire({
                            icon: "warning",
                            title: "Cannot Proceed to Checkout",
                            html: `
                                <p>Some items in your cart are unavailable:</p>
                                <ul style="text-align: left;">${unavailableList}</ul>
                                <p>Please remove or update these items to continue.</p>
                            `,
                            confirmButtonColor: "#2481e4",
                        });
                    } else {
                        Swal.fire({
                            icon: "error",
                            title: "Checkout Error",
                            text: data.message || "An error occurred while validating your cart.",
                            confirmButtonColor: "#2481e4",
                        });
                    }
                }
            } catch (error) {
                console.error("Error validating cart:", error);
                Swal.fire({
                    icon: "error",
                    title: "Validation Error",
                    text: "An error occurred while checking your cart. Please try again.",
                    confirmButtonColor: "#2481e4",
                });
            }
        });
    });
</script>