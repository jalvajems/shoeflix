<%- include("../partials/user/header") %>

<style>
    .wishlist-container {
        max-width: 1200px;
        margin: 40px auto;
        padding: 20px;
    }
    .wishlist-header {
        text-align: center;
        margin-bottom: 40px;
    }
    .wishlist-header h1 {
        font-size: 32px;
        color: #333;
    }
    .wishlist-count {
        color: #767676;
        font-size: 16px;
    }
    .wishlist-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 30px;
    }
    .wishlist-item {
        background: #fff;
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
        transition: all 0.3s ease;
    }
    .wishlist-item:hover {
        transform: translateY(-10px);
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.12);
    }
    .wishlist-item img {
        max-width: 100%;
        height: 220px;
        object-fit: cover;
        border-radius: 8px;
    }
    .item-title {
        font-size: 16px;
        color: #333;
        margin: 12px 0;
    }
    .item-price {
        font-size: 18px;
        color: #46698f;
        font-weight: 600;
    }
    .size-option {
        cursor: pointer;
        padding: 5px 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        margin: 5px;
    }
    .size-option.active {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }
    .add-to-cart-btn {
        background: #46698f;
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        width: 100%;
        margin: 15px 0;
        cursor: pointer;
        font-size: 14px;
    }
    .add-to-cart-btn:hover {
        background: #1e918b;
    }
    .remove-item {
        color: #767676;
        background: transparent;
        border: none;
        padding: 8px;
        cursor: pointer;
        font-size: 13px;
    }
    .remove-item:hover {
        color: #c92466;
    }
    .empty-wishlist {
        text-align: center;
        padding: 60px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
    }
    .empty-wishlist h2 {
        color: #333;
        font-weight: 600;
    }
    .empty-wishlist p {
        color: #767676;
        max-width: 500px;
        margin: 0 auto 25px;
    }
    .shop-now-btn {
        display: inline-block;
        background: #46698f;
        color: white;
        padding: 12px 25px;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 500;
    }
    .shop-now-btn:hover {
        background: #1e918b;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="wishlist-container">
    <div class="wishlist-header">
        <h1>My Wishlist</h1>
        <div class="wishlist-count">
            <%= wishlist ? wishlist.products.length : 0 %> items
        </div>
    </div>

    <% if (!wishlist || wishlist.products.length === 0) { %>
        <div class="empty-wishlist">
            <h2>Your wishlist is empty</h2>
            <p>Add items you love to your wishlist. Review them anytime and easily move them to the cart.</p>
            <a href="/shop" class="shop-now-btn">Continue Shopping</a>
        </div>
    <% } else { %>
        <div class="wishlist-grid">
            <% wishlist.products.forEach((item, index) => { %>
                <div class="wishlist-item" data-product-id="<%= item.productId._id %>">
                    <a href="/productDetails/<%= item.productId._id %>">
                        <img src="/uploads/product-images/<%= item.productId.productImage[0] %>" 
                             alt="<%= item.productId.productName %>">
                    </a>
                    <h3 class="item-title">
                        <%= item.productId.productName %>
                    </h3>
                    <p class="item-price">â‚¹<%= item.productId.salePrice.toLocaleString('en-IN') %></p>
                    
                    <!-- Size Selection -->
                    <div class="sizes mb-3 d-flex flex-wrap gap-2 justify-content-center">
                        <% item.productId.variants.forEach(variant => { %>
                            <div class="size-option" 
                                 data-size="<%= variant.size %>" 
                                 data-stock="<%= variant.quantity %>">
                                <%= variant.size %>
                            </div>
                        <% }); %>
                    </div>
                    <div class="stock-info text-muted" id="stock-info-<%= item.productId._id %>">
                        Select a size to see available stock
                    </div>

                    <button class="add-to-cart-btn" 
                            onclick="addToCartFromWishlist('<%= item.productId._id %>', '<%= item.productId.productName %>')">
                        Add to Cart
                    </button>
                    <button class="remove-item" onclick="removeFromWishlist('<%= item.productId._id %>')">
                        Remove from wishlist
                    </button>
                </div>
            <% }); %>
        </div>
    <% } %>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Size Selection Logic
        const wishlistItems = document.querySelectorAll('.wishlist-item');
        wishlistItems.forEach(item => {
            const productId = item.dataset.productId;
            const sizeOptions = item.querySelectorAll('.size-option');
            const stockInfo = item.querySelector(`#stock-info-${productId}`);

            sizeOptions.forEach(option => {
                option.addEventListener('click', function() {
                    sizeOptions.forEach(opt => opt.classList.remove('active'));
                    this.classList.add('active');
                    const stock = parseInt(this.dataset.stock);
                    if (stock <= 0) {
                        stockInfo.textContent = 'Out of stock';
                    } else {
                        stockInfo.textContent = `Available stock: ${stock} items`;
                    }
                });
            });
        });
    });

    async function addToCartFromWishlist(productId, productName) {
        const item = document.querySelector(`.wishlist-item[data-product-id="${productId}"]`);
        const selectedSizeOption = item.querySelector('.size-option.active');
        
        if (!selectedSizeOption) {
            Swal.fire({
                icon: 'warning',
                title: 'Size Required',
                text: 'Please select a size before adding to cart.',
                confirmButtonColor: '#46698f'
            });
            return;
        }

        const size = selectedSizeOption.dataset.size;
        const stock = parseInt(selectedSizeOption.dataset.stock);

        if (stock <= 0) {
            Swal.fire({
                icon: 'error',
                title: 'Out of Stock',
                text: 'This size is currently out of stock.',
                confirmButtonColor: '#46698f'
            });
            return;
        }

        Swal.fire({
            title: 'Add to Cart?',
            text: `Add ${productName} (Size: ${size}) to your cart?`,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#46698f',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, add it!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch('/add-to-cart', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            productId,
                            size,
                            quantity: 1
                        })
                    });
                    const data = await response.json();

                    if (data.status) { // Assuming your /add-to-cart returns { status: true } on success
                        // Remove from wishlist
                        const removeResponse = await fetch('/remove-from-wishlist', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ productId })
                        });
                        const removeData = await removeResponse.json();

                        if (removeData.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Added to Cart',
                                text: `${productName} has been added to your cart and removed from your wishlist!`,
                                confirmButtonColor: '#46698f'
                            }).then(() => {
                                window.location.reload();
                            });
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed',
                                text: 'Added to cart, but failed to remove from wishlist.',
                                confirmButtonColor: '#46698f'
                            });
                        }
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed',
                            text: data.message || 'Failed to add to cart.',
                            confirmButtonColor: '#46698f'
                        });
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Something went wrong. Please try again.',
                        confirmButtonColor: '#46698f'
                    });
                }
            }
        });
    }

    function removeFromWishlist(productId) {
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to remove this item from your wishlist?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#46698f',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch('/remove-from-wishlist', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Removed',
                            text: 'Item removed from wishlist!',
                            confirmButtonColor: '#46698f'
                        }).then(() => {
                            window.location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Failed',
                            text: data.message || 'Failed to remove item from wishlist',
                            confirmButtonColor: '#46698f'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Something went wrong. Please try again.',
                        confirmButtonColor: '#46698f'
                    });
                });
            }
        });
    }
</script>

<%- include("../partials/user/footer") %>