<%- include("../../views/partials/user/header") %>
<div class="container mt-4">
   <h3 class="mt-3" style="color: #046963; margin-bottom:70px">Edit Address</h3>
   <form id="addressForm" method="POST" action="/editAddress?id=<%= address._id.toString() %>" class="border-0 p-3">
       <div class="row mb-50">
           <div class="form-group col-md-4">
               <label for="addressType">Address Type:</label>
               <input type="text" class="form-control border-3" value="<%= address.addressType %>" id="addressType" name="addressType" >
           </div>
           <div class="form-group col-md-4">
               <label for="name">Name:</label>
               <input type="text" class="form-control border-3" value="<%= address.name %>" id="name" name="name" >
           </div>
           <div class="form-group col-md-4">
               <label for="city">City:</label>
               <input type="text" class="form-control border-3" id="city" value="<%= address.city %>" name="city" >
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="landMark">Landmark:</label>
               <input type="text" class="form-control border-3" value="<%= address.landMark %>" id="landMark" name="landMark" >
           </div>
           <div class="form-group col-md-4">
               <label for="state">State:</label>
               <input type="text" class="form-control border-3" value="<%= address.state %>" id="state" name="state" >
           </div>
           <div class="form-group col-md-4">
               <label for="pincode">Pincode:</label>
               <input type="number" class="form-control border-3" value="<%= address.pincode %>" id="pincode" name="pincode" >
           </div>
       </div>
       <div class="row mb-3">
           <div class="form-group col-md-4">
               <label for="phone">Phone:</label>
               <input type="number" class="form-control border-3" id="phone" value="<%= address.phone %>" name="phone" required>
           </div>
           <div class="form-group col-md-4">
               <label for="altPhone">Alternate Phone (optional):</label>
               <input type="number" class="form-control border-3" id="altPhone" value="<%= address.altPhone || '' %>" name="altPhone">
           </div>
       </div>
       <button type="submit" id="submitButton" class="btn btn-primary">Submit</button>
   </form>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
   document.getElementById('addressForm').addEventListener('submit', function(event) {
       if (!validateForm()) {
           event.preventDefault();
       }
   });

   function validateForm() {
       let isValid = true;
       const requiredFields = ["addressType", "name", "city", "landMark", "state", "pincode", "phone"];
       requiredFields.forEach(function(field) {
           const input = document.getElementById(field);
           const inputValue = input.value.trim();
           const errorElement = document.getElementById(field + '-error');

           if (inputValue === "") {
               if (!errorElement) {
                   const errorMessage = "This field is required.";
                   const errorDiv = document.createElement('div');
                   errorDiv.className = "text-danger";
                   errorDiv.textContent = errorMessage;
                   errorDiv.id = field + '-error';
                   input.parentNode.appendChild(errorDiv);
               }
               isValid = false;
           } else {
               if (errorElement) {
                   errorElement.remove();
               }
           }
       });

       if (!isValid) return false;

       const addressType = document.getElementById('addressType').value.trim();
       const name = document.getElementById('name').value.trim();
       const city = document.getElementById('city').value.trim();
       const landMark = document.getElementById('landMark').value.trim();
       const state = document.getElementById('state').value.trim();
       const pincode = document.getElementById('pincode').value.trim();
       const phone = document.getElementById('phone').value.trim();
       const altPhone = document.getElementById('altPhone').value.trim();

       const namePattern = /^[A-Za-z\s]+$/;
       const pincodePattern = /^\d{6}$/;
       const phonePattern = /^\d{10}$/;
       const allZerosPattern = /^0+$/;

       if (!namePattern.test(addressType)) {
           Swal.fire({
               title: 'Error',
               text: 'Address Type should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(name)) {
           Swal.fire({
               title: 'Error',
               text: 'Name should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(city)) {
           Swal.fire({
               title: 'Error',
               text: 'City should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(landMark)) {
           Swal.fire({
               title: 'Error',
               text: 'Landmark should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!namePattern.test(state)) {
           Swal.fire({
               title: 'Error',
               text: 'State should contain alphabets only.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!pincodePattern.test(pincode)) {
           Swal.fire({
               title: 'Error',
               text: 'Pincode should be a 6-digit number.',
               icon: 'error'
           });
           isValid = false;
       }
       if (!phonePattern.test(phone)) {
           Swal.fire({
               title: 'Error',
               text: 'Phone number should be a 10-digit number.',
               icon: 'error'
           });
           isValid = false;
       } else if (allZerosPattern.test(phone)) {
           Swal.fire({
               title: 'Error',
               text: 'Phone number cannot be all zeros.',
               icon: 'error'
           });
           isValid = false;
       }

       if (altPhone !== "") {
           if (!phonePattern.test(altPhone)) {
               Swal.fire({
                   title: 'Error',
                   text: 'Alternate phone number should be a 10-digit number.',
                   icon: 'error'
               });
               isValid = false;
           } else if (allZerosPattern.test(altPhone)) {
               Swal.fire({
                   title: 'Error',
                   text: 'Alternate phone number cannot be all zeros.',
                   icon: 'error'
               });
               isValid = false;
           } else if (altPhone === phone) {
               Swal.fire({
                   title: 'Error',
                   text: 'Phone number and alternate phone number should be different.',
                   icon: 'error'
               });
               isValid = false;
           }
       }

       return isValid;
   }
</script>
<style>
    #submitButton {
        background-color: #000;
        color: #fff;
        border: none;
    }
    #submitButton:hover {
        background-color: #333;
    }
</style>
<%- include("../../views/partials/user/footer") %>