<%- include("../../views/partials/user/header") %>

<style>
  .table th, .table td {
    vertical-align: middle;
    text-align: center;
    padding: 12px;
  }
  .table .badge {
    font-size: 0.9em;
    padding: 6px 12px;
    border-radius: 12px;
  }
  .card-green {
    background-color: #e6f3f0;
    border: none;
  }
  .main {
    padding: 40px 0;
    background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
  }
  .dashboard-menu {
    background-color: #ffffff;
    border-radius: 15px;
    padding: 20px;
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
  }
  .dashboard-menu .nav-link {
    font-weight: 600;
    color: #2c3e50;
    padding: 12px 15px;
    border-radius: 8px;
    transition: all 0.3s ease;
  }
  .dashboard-menu .nav-link:hover, .dashboard-menu .nav-link.active {
    color: #ffffff;
    background-color: #3498db;
    box-shadow: 0 4px 10px rgba(52, 152, 219, 0.3);
  }
  .card {
    border-radius: 15px;
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.1);
    margin-bottom: 25px;
    border: none;
  }
  .card-header {
    background-color: #3498db;
    color: white;
    border-radius: 15px 15px 0 0;
    padding: 15px;
  }
  .btn-success {
    background-color: #2ecc71;
    border-color: #2ecc71;
    transition: all 0.3s ease;
  }
  .btn-success:hover {
    background-color: #27ae60;
    border-color: #27ae60;
  }
  .form-group {
    margin-bottom: 20px;
  }
  .required {
    color: #e74c3c;
  }
  @media (max-width: 768px) {
    .dashboard-menu {
      padding: 15px;
    }
    .card {
      margin-bottom: 20px;
    }
  }
  .page-header.breadcrumb-wrap {
    background-color: #ffffff;
    padding: 20px 0;
    border-radius: 10px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }
  .breadcrumb {
    display: flex;
    align-items: center;
    font-family: 'Poppins', sans-serif;
    font-size: 16px;
    color: #2c3e50;
  }
  .breadcrumb a {
    color: #3498db;
    text-decoration: none;
    position: relative;
    margin: 0 8px;
    transition: all 0.3s ease;
  }
  .breadcrumb a:hover {
    color: #2980b9;
  }
  .breadcrumb span {
    margin: 0 8px;
    color: #bdc3c7;
  }
  .card-body {
    font-weight: 500;
    padding: 20px;
  }
  #addAddrs {
    margin: 20px 0;
    width: 100%;
    padding: 12px;
    font-size: 16px;
  }
  .modal-content {
    border-radius: 15px;
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.2);
  }
  .order-card {
    margin-bottom: 20px;
    border: 1px solid #ecf0f1;
    border-radius: 10px;
    padding: 15px;
    background-color: #ffffff;
    position: relative;
    transition: all 0.3s ease;
  }
  .order-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  .order-card .badge {
    font-size: 0.9em;
    padding: 6px 12px;
    position: absolute;
    top: 15px;
    right: 15px;
  }
  .order-card img {
    width: 60px;
    height: auto;
    margin-right: 15px;
    border-radius: 5px;
  }
  .order-details {
    display: none;
    margin-top: 15px;
    padding: 15px;
    background-color: #f9f9f9;
    border: 1px solid #ecf0f1;
    border-radius: 8px;
  }
  .btn-cancel {
    background-color: #e74c3c;
    color: white;
    border: none;
    transition: all 0.3s ease;
  }
  .btn-cancel:hover {
    background-color: #c0392b;
  }
  .btn-return {
    background-color: #f1c40f;
    color: white;
    border: none;
    transition: all 0.3s ease;
  }
  .btn-return:hover {
    background-color: #d4ac0d;
  }
  #returnModal .modal-body textarea,
  #cancelRequestModal .modal-body textarea {
    width: 100%;
    margin-bottom: 15px;
    border-radius: 8px;
  }
  .cancelled-item {
    text-decoration: line-through;
    color: #e74c3c;
    opacity: 0.7;
  }
  .table-responsive {
    overflow-x: auto;
  }
  .btn-retry-payment {
    background-color: #2481e4;
    color: white;
    border: none;
    padding: 6px 12px;
    font-size: 14px;
    border-radius: 5px;
    transition: all 0.3s ease;
  }
  .btn-retry-payment:hover {
    background-color: #0056b3;
  }
</style>

<main class="main">
  <div class="page-header breadcrumb-wrap mb-4">
    <div class="container">
      <div class="breadcrumb">
        <a href="#" rel="nofollow">Home</a>
        <span></span> Profile <span></span> Account
      </div>
    </div>
  </div>
  <section class="pt-20 pb-20">
    <div class="container">
      <div class="row">
        <div class="col-lg-10 m-auto">
          <div class="row">
            <div class="col-md-4">
              <div class="dashboard-menu">
                <ul class="nav flex-column" role="tablist">
                  <li class="nav-item">
                    <a class="nav-link active" id="dashboard-tab" data-bs-toggle="tab" href="#dashboard" role="tab" aria-controls="dashboard" aria-selected="true">
                      <i class="fi-rs-settings-sliders mr-10"></i>Dashboard
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="address-tab" data-bs-toggle="tab" href="#address" role="tab" aria-controls="address" aria-selected="false">
                      <i class="fi-rs-marker mr-10"></i>My Address
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="orders-tab" data-bs-toggle="tab" href="#orders" role="tab" aria-controls="orders" aria-selected="false">
                      <i class="fi-rs-shopping-bag mr-10"></i>Orders
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="track-orders-tab" data-bs-toggle="tab" href="#track-orders" role="tab" aria-controls="track-orders" aria-selected="false">
                      <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet Status
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" id="wallet-history-tab" data-bs-toggle="tab" href="#wallet-history" role="tab" aria-controls="wallet-history" aria-selected="false">
                      <i class="fi-rs-shopping-cart-check mr-10"></i>Wallet History
                    </a>
                  </li>
                  <li class="nav-item">
                    <a class="nav-link" href="/logout">
                      <i class="fi-rs-sign-out mr-10"></i>Logout
                    </a>
                  </li>
                </ul>
              </div>
            </div>
            <div class="col-md-8">
              <div class="tab-content dashboard-content">
                <!-- Dashboard Tab -->
                <div class="tab-pane fade show active" id="dashboard" role="tabpanel" aria-labelledby="dashboard-tab">
                  <div class="card card-green">
                    <div class="card-header">
                      <h5 class="mb-0 text-center">User Profile</h5>
                    </div>
                    <div class="card-body text-center">
                      <p class="card-text"><strong>Name:</strong> <%= user.name %></p>
                      <p class="card-text"><strong>Phone:</strong> <%= user.phone %></p>
                      <p class="card-text"><strong>Email:</strong> <%= user.email %></p>
                      <a href="/change-email" class="btn btn-sm btn-success mr-2">Change Email</a>
                      <a href="/change-password" class="btn btn-sm btn-success">Change Password</a>
                    </div>
                  </div>
                </div>

                <!-- Address Tab -->
                <div class="tab-pane fade" id="address" role="tabpanel" aria-labelledby="address-tab">
                  <div class="row">
                    <% if (userAddress) { %>
                      <% userAddress.address.forEach((address) => { %>
                        <div class="col-lg-6">
                          <div class="card mb-4">
                            <div class="card-header"><h5 class="mb-0"><%= address.addressType %></h5></div>
                            <div class="card-body">
                              <address><%= address.name %> <br><%= address.city %> <br><%= address.landMark %> <br><%= address.state %> - <%= address.pincode %></address>
                              <p>Phone: <%= address.phone %> / <%= address.altPhone %></p>
                              <div class="d-flex justify-content-between">
                                <a href="/editAddress?id=<%= address._id %>" class="btn btn-sm btn-success">Edit</a>
                                <a href="/deleteAddress?id=<%= address._id %>" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure?')">Delete</a>
                              </div>
                            </div>
                          </div>
                        </div>
                      <% }) %>
                    <% } else { %>
                      <div class="col-lg-12"><div class="card mb-4"><div class="card-body"><p>No address available</p></div></div></div>
                    <% } %>
                    <div><a href="/addAddress"><button id="addAddrs" class="btn btn-primary">Add Address</button></a></div>
                  </div>
                </div>

                <!-- Orders Tab -->
                <div class="tab-pane fade" id="orders" role="tabpanel" aria-labelledby="orders-tab">
                  <div class="card">
                    <div class="card-header"><h5 class="mb-0">Your Orders</h5></div>
                    <div class="card-body">
                      <button type="button" class="btn btn-success mb-3" data-bs-toggle="modal" data-bs-target="#orderModal">View Orders</button>
                    </div>
                  </div>
                </div>

                <!-- Wallet Tab -->
                <div class="tab-pane fade" id="track-orders" role="tabpanel" aria-labelledby="track-orders-tab">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Wallet</h5>
                    </div>
                    <div class="card-body">
                      <p><strong>Current Wallet Balance:</strong> ₹<%= user.wallet %></p>
                      <p>Use your wallet balance to make purchases or withdraw funds (if applicable).</p>
                    </div>
                  </div>
                </div>

                <!-- Wallet History Tab -->
                <div class="tab-pane fade" id="wallet-history" role="tabpanel" aria-labelledby="wallet-history-tab">
                  <div class="card">
                    <div class="card-header">
                      <h5 class="mb-0">Wallet History</h5>
                    </div>
                    <div class="card-body">
                      <% if (user.walletHistory && user.walletHistory.length > 0) { %>
                        <div class="table-responsive">
                          <table class="table table-bordered">
                            <thead>
                              <tr>
                                <th>Transaction ID</th>
                                <th>Date</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Status</th>
                                <th>Description</th>
                              </tr>
                            </thead>
                            <tbody>
                              <% user.walletHistory.forEach(transaction => { %>
                                <tr>
                                  <td><%= transaction.transactionId %></td>
                                  <td><%= new Date(transaction.date).toLocaleString() %></td>
                                  <td><%= transaction.type.charAt(0).toUpperCase() + transaction.type.slice(1) %></td>
                                  <td>₹<%= transaction.amount.toFixed(2) %></td>
                                  <td>
                                    <span class="badge <%= transaction.status === 'Completed' ? 'bg-success' : 'bg-warning' %>">
                                      <%= transaction.status %>
                                    </span>
                                  </td>
                                  <td><%= transaction.description || 'N/A' %></td>
                                </tr>
                              <% }) %>
                            </tbody>
                          </table>
                        </div>
                      <% } else { %>
                        <p>No wallet transactions found.</p>
                      <% } %>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

<!-- Order Modal -->
<div class="modal fade" id="orderModal" tabindex="-1" aria-labelledby="orderModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="orderModalLabel">Your Orders</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <% if (orders && orders.length > 0) { %>
          <div class="order-list">
            <% orders.forEach(order => { %>
              <div class="order-card">
                <div class="d-flex justify-content-between align-items-center">
                  <div>
                    <strong>Order ID: <%= order.orderId %></strong><br>
                    <span>Items: <%= order.orderItems.length %></span><br>
                    <span>Total: ₹<%= order.finalAmount.toFixed(2) %></span><br>
                    <span class="badge <%= order.status === 'Delivered' ? 'bg-success' : order.status === 'Cancelled' ? 'bg-danger' : order.status === 'Cancellation Requested' ? 'bg-warning' : order.status === 'Pending' && order.paymentDetails?.status === 'Failed' ? 'bg-danger' : 'bg-warning' %>">
                      <%= order.status === 'Pending' && order.paymentDetails?.status === 'Failed' ? 'Payment Failed' : order.status %>
                    </span>
                    <span>Date: <%= new Date(order.createdOn).toLocaleDateString() %></span>
                  </div>
                  <button class="btn btn-primary btn-sm view-details" data-order-id="<%= order._id %>">View Details</button>
                </div>
                <div class="order-details" id="details-<%= order._id %>">
                  <h6>Order Details</h6>
                  <p><strong>Shipping Address:</strong></p>
                  <address>
                    <% if (order.address && order.address.length > 0) { %>
                      <%= order.address[0].name %> <br>
                      <%= order.address[0].city %> <br>
                      <%= order.address[0].landMark %> <br>
                      <%= order.address[0].state %> - <%= order.address[0].pincode %> <br>
                      Phone: <%= order.address[0].phone %> / <%= order.address[0].altPhone %>
                    <% } else { %>
                      No address available
                    <% } %>
                  </address>
                  <ul class="list-unstyled">
                    <% order.orderItems.forEach(item => { %>
                      <li class="mb-2 item-row" data-item-id="<%= item._id %>">
                        <img src="/uploads/product-images/<%= item.productImage %>" alt="<%= item.name %>">
                        <%= item.name %> (Size: <%= item.variants.size %>, Qty: <%= item.variants.quantity %>) - ₹<%= (item.price * item.variants.quantity).toFixed(2) %>
                        <% if (order.status === 'Pending' || order.status === 'Processing') { %>
                          <button class="btn btn-cancel btn-sm cancel-product" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>">Cancel Product</button>
                        <% } %>
                        <% if (order.status === 'Delivered' && new Date(order.createdOn).getTime() + 30*24*60*60*1000 > Date.now() && item.cancelStatus !== 'Cancelled') { %>
                          <button class="btn btn-return btn-sm return-product" data-order-id="<%= order._id %>" data-item-id="<%= item._id %>" data-bs-toggle="modal" data-bs-target="#returnModal">Return</button>
                        <% } %>
                        <% if (item.cancelStatus === 'Cancelled') { %>
                          <span class="cancelled-item">[Cancelled]</span>
                        <% } %>
                      </li>
                    <% }) %>
                  </ul>
                  <p><strong>Final Amount: ₹<%= order.finalAmount.toFixed(2) %></strong></p>
                  <a href="/download-invoice/<%= order.orderId %>" class="btn btn-success btn-sm">Download Invoice</a>
                  <% if (order.status === 'Pending' || order.status === 'Processing') { %>
                    <button class="btn btn-danger btn-sm request-cancel-order" data-order-id="<%= order._id %>" data-bs-toggle="modal" data-bs-target="#cancelRequestModal">Request Cancellation</button>
                  <% } %>
                  <% if (order.status === 'Pending' && order.paymentDetails?.status === 'Failed') { %>
                    <button class="btn btn-retry-payment btn-sm retry-payment" 
                    data-order-id="<%= order.orderId %>" 
                    data-address-id="<%= order.address[0]?._id || '' %>" 
                    data-coupon-code="<%= order.couponCode || '' %>">Retry Payment</button>                  <% } %>
                </div>
              </div>
            <% }) %>
          </div>
          <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
              <% for(let i = 1; i <= totalPages; i++) { %>
                <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                  <a class="page-link" href="?page=<%= i %>"><%= i %></a>
                </li>
              <% } %>
            </ul>
          </nav>
        <% } else { %>
          <p>No orders found.</p>
        <% } %>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

  <!-- Return Reason Modal -->
  <div class="modal fade" id="returnModal" tabindex="-1" aria-labelledby="returnModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="returnModalLabel">Enter Return Reason</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="returnReasonForm">
            <div class="form-group">
              <label for="returnReason">Return Reason <span class="required">*</span></label>
              <textarea class="form-control" id="returnReason" rows="3" placeholder="Please enter the reason for return" required></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="submitReturnReason">Submit</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Cancel Request Modal -->
  <div class="modal fade" id="cancelRequestModal" tabindex="-1" aria-labelledby="cancelRequestModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="cancelRequestModalLabel">Request Order Cancellation</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="cancelRequestForm">
            <div class="form-group">
              <label for="cancelRequestReason">Cancellation Reason <span class="required">*</span></label>
              <textarea class="form-control" id="cancelRequestReason" rows="3" placeholder="Please enter the reason for requesting cancellation" required></textarea>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="submitCancelRequest">Submit Request</button>
        </div>
      </div>
    </div>
  </div>
</main>
<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', () => {

// Step 1: Activate tab based on URL hash on page load
  const hash = window.location.hash;
  if (hash) {
    const tab = document.querySelector(`a[href="${hash}"]`);
    if (tab) {
      new bootstrap.Tab(tab).show();
    }
  }

  // Step 2: Update URL hash when a tab is shown
  const tabs = document.querySelectorAll('.nav-link[data-bs-toggle="tab"]');
  tabs.forEach(tab => {
    tab.addEventListener('shown.bs.tab', event => {
      history.replaceState(null, null, event.target.getAttribute('href'));
    });
  });

    // View Details
    document.querySelectorAll('.view-details').forEach(button => {
      button.addEventListener('click', () => {
        const orderId = button.getAttribute('data-order-id');
        const details = document.getElementById(`details-${orderId}`);
        details.style.display = details.style.display === 'none' ? 'block' : 'none';
      });
    });

    // Product Cancellation (unchanged)
    document.querySelectorAll('.cancel-product').forEach(button => {
      button.addEventListener('click', () => {
        const orderId = button.getAttribute('data-order-id');
        const itemId = button.getAttribute('data-item-id');
        const itemRow = button.closest('.item-row');

        Swal.fire({
          title: 'Are you sure you want to cancel this product?',
          text: "This action cannot be undone!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#e74c3c',
          cancelButtonColor: '#7f8c8d',
          confirmButtonText: 'Yes, cancel it!'
        }).then((result) => {
          if (result.isConfirmed) {
            fetch(`/cancel-product/${orderId}/${itemId}`, {
              method: 'POST',
              headers: { 
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
              },
              body: JSON.stringify({ reason: 'User-initiated cancellation' })
            })
            .then(response => {
              if (!response.ok) throw new Error('Network response was not ok');
              return response.json();
            })
            .then(data => {
              if (data.success) {
                Swal.fire('Success', 'Product cancelled successfully!', 'success').then(() => {
                  if (itemRow) itemRow.remove();
                  const finalAmountElement = document.querySelector(`#details-${orderId} p strong`);
                  if (finalAmountElement) {
                    const currentAmount = parseFloat(finalAmountElement.textContent.replace('₹', '').replace(',', ''));
                    const itemPrice = parseFloat(button.closest('li').textContent.match(/₹([\d,.]+)/)[1]);
                    finalAmountElement.textContent = `Final Amount: ₹${(currentAmount - itemPrice).toFixed(2)}`;
                  }
                });
              } else {
                Swal.fire('Error', data.message, 'error');
              }
            })
            .catch(err => {
              Swal.fire('Error', `An error occurred while cancelling the product: ${err.message}`, 'error');
            });
          }
        });
      });
    });

    // Return Product (unchanged)
    document.querySelectorAll('.return-product').forEach(button => {
      button.addEventListener('click', () => {
        const orderId = button.getAttribute('data-order-id');
        const itemId = button.getAttribute('data-item-id');
        const returnModal = document.getElementById('returnModal');
        returnModal.setAttribute('data-order-id', orderId);
        returnModal.setAttribute('data-item-id', itemId);
      });
    });

    document.getElementById('submitReturnReason').addEventListener('click', () => {
      const returnReason = document.getElementById('returnReason').value.trim();
      const orderId = document.getElementById('returnModal').getAttribute('data-order-id');
      const itemId = document.getElementById('returnModal').getAttribute('data-item-id');

      if (!returnReason) {
        Swal.fire('Error', 'Please enter a return reason.', 'error');
        return;
      }

      fetch(`/return-product/${orderId}/${itemId}`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
        },
        body: JSON.stringify({ reason: returnReason })
      })
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(data => {
        if (data.success) {
          Swal.fire('Success', 'Return request submitted successfully!', 'success').then(() => {
            location.reload();
          });
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      })
      .catch(err => {
        Swal.fire('Error', `An error occurred while submitting the return request: ${err.message}`, 'error');
      });
    });

    // Order Cancellation Request
    document.querySelectorAll('.request-cancel-order').forEach(button => {
      button.addEventListener('click', () => {
        const orderId = button.getAttribute('data-order-id');
        const cancelRequestModal = document.getElementById('cancelRequestModal');
        cancelRequestModal.setAttribute('data-order-id', orderId);
      });
    });

    document.getElementById('submitCancelRequest').addEventListener('click', () => {
      const cancelReason = document.getElementById('cancelRequestReason').value.trim();
      const orderId = document.getElementById('cancelRequestModal').getAttribute('data-order-id');

      if (!cancelReason) {
        Swal.fire('Error', 'Please enter a cancellation reason.', 'error');
        return;
      }

      fetch(`/request-cancel-order/${orderId}`, {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('token') || ''}`
        },
        body: JSON.stringify({ reason: cancelReason })
      })
      .then(response => {
        if (!response.ok) throw new Error('Network response was not ok');
        return response.json();
      })
      .then(data => {
        if (data.success) {
          Swal.fire('Success', 'Cancellation request submitted successfully!', 'success').then(() => {
            location.reload();
          });
        } else {
          Swal.fire('Error', data.message, 'error');
        }
      })
      .catch(err => {
        Swal.fire('Error', `An error occurred while submitting the cancellation request: ${err.message}`, 'error');
      });
    });
    document.querySelectorAll('.retry-payment').forEach(button => {
  button.addEventListener('click', async () => {
    const orderId = button.getAttribute('data-order-id');
    const addressId = button.getAttribute('data-address-id');
    const couponCode = button.getAttribute('data-coupon-code');
    try {
      const response = await fetch('/retry-razorpay-order', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId })
      });
      const orderData = await response.json();
      if (!orderData.success) {
        Toastify({
          text: orderData.message,
          duration: 5000,
          gravity: 'top',
          position: 'right',
          backgroundColor: '#ff4444'
        }).showToast();
        return;
      }
      const options = {
        key: orderData.razorpayKeyId,
        amount: orderData.amount,
        currency: 'INR',
        name: 'Shoeflix',
        description: 'Order Payment Retry',
        order_id: orderData.razorpayOrderId,
        handler: async (response) => {
          const verifyResponse = await fetch('/verify-razorpay-payment', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              orderId: orderData.orderId,
              razorpayOrderId: response.razorpay_order_id,
              razorpayPaymentId: response.razorpay_payment_id,
              razorpaySignature: response.razorpay_signature
            })
          });
          const verifyData = await verifyResponse.json();
          if (verifyData.success) {
            Swal.fire('Success', 'Payment successful! Redirecting...', 'success').then(() => {
              window.location.href = `/thank-you?orderId=${verifyData.orderId}`;
            });
          } else {
            Toastify({
              text: verifyData.message,
              duration: 5000,
              gravity: 'top',
              position: 'right',
              backgroundColor: '#ff4444'
            }).showToast();
          }
        },
        prefill: {
          name: "<%= user.name %>",
          email: "<%= user.email || '' %>",
          contact: "<%= user.phone || '' %>"
        },
        theme: { color: '#2481e4' }
      };
      const rzp = new Razorpay(options);
      rzp.open();
      rzp.on('payment.failed', async (response) => {
        await fetch('/handle-payment-dismissal', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId: orderData.orderId, addressId, reason: response.error.description })
        });
        window.location.href = `/order-failure?orderId=${orderData.orderId}&amount=${orderData.amount / 100}&addressId=${addressId}&couponCode=${couponCode}`;
      });
    } catch (error) {
      Toastify({
        text: 'Error initiating retry payment',
        duration: 5000,
        gravity: 'top',
        position: 'right',
        backgroundColor: '#ff4444'
      }).showToast();
    }
  });
});
  });
</script>
<%- include("../../views/partials/user/footer") %>