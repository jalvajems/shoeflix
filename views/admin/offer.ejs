<%- include("../../views/partials/admin/header") %>

<main class="main-wrap">
    <section class="content-main">
        <div class="content-header">
            <h2 class="content-title">Add New Offer</h2>
        </div>
        <div class="card">
            <div class="card-body">
                <form id="offerForm" action="/admin/offer" method="POST">
                    <div class="form-group">
                        <label for="name">Offer Name:</label>
                        <input type="text" class="form-control" id="name" name="name">
                        <span class="error-message" id="nameError"></span>
                    </div>
                    <div class="form-group">
                        <label for="type">Offer Type:</label>
                        <select class="form-control" id="type" name="type">
                            <option value="">Select Type</option>
                            <option value="product">Product Offer</option>
                            <option value="category">Category Offer</option>
                        </select>
                        <span class="error-message" id="typeError"></span>
                    </div>
                    <div class="form-group" id="productField">
                        <label for="productId">Select Product:</label>
                        <select class="form-control" id="productId" name="productId">
                            <option value="">Select Product</option>
                            <% products.forEach(product => { %>
                                <option value="<%= product._id %>" data-price="<%= product.regularPrice %>"><%= product.productName %></option>
                            <% }); %>
                        </select>
                        <span class="error-message" id="productIdError"></span>
                    </div>
                    <div class="form-group hidden" id="categoryField">
                        <label for="categoryId">Select Category:</label>
                        <select class="form-control" id="categoryId" name="categoryId">
                            <option value="">Select Category</option>
                            <% categories.forEach(category => { %>
                                <option value="<%= category._id %>"><%= category.name %></option>
                            <% }); %>
                        </select>
                        <span class="error-message" id="categoryIdError"></span>
                    </div>
                    <div class="form-group">
                        <label for="discountType">Discount Type:</label>
                        <select class="form-control" id="discountType" name="discountType">
                            <option value="percentage">Percentage</option>
                            <option value="amount">Fixed Amount</option>
                        </select>
                        <span class="error-message" id="discountTypeError"></span>
                    </div>
                    <div class="form-group">
                        <label for="discountValue">Discount Value:</label>
                        <input type="number" class="form-control" id="discountValue" name="discountValue" min="0">
                        <span class="error-message" id="discountValueError"></span>
                    </div>
                    <div class="form-group">
                        <label for="startDate">Start Date:</label>
                        <input type="date" class="form-control" id="startDate" name="startDate">
                        <span class="error-message" id="startDateError"></span>
                    </div>
                    <div class="form-group">
                        <label for="endDate">End Date:</label>
                        <input type="date" class="form-control" id="endDate" name="endDate">
                        <span class="error-message" id="endDateError"></span>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Offer</button>
                </form>
            </div>
        </div>
    </section>
</main>

<style>
    .error-message {
        color: red;
        font-size: 0.9em;
        margin-top: 5px;
        display: block;
    }
    .hidden {
        display: none;
    }
</style>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Toggle Product/Category fields based on Offer Type
    document.getElementById("type").addEventListener("change", function () {
        const productField = document.getElementById("productField");
        const categoryField = document.getElementById("categoryField");
        const productId = document.getElementById("productId");
        const categoryId = document.getElementById("categoryId");

        if (this.value === "product") {
            productField.classList.remove("hidden");
            categoryField.classList.add("hidden");
            productId.required = true;
            categoryId.required = false;
        } else if (this.value === "category") {
            productField.classList.add("hidden");
            categoryField.classList.remove("hidden");
            productId.required = false;
            categoryId.required = true;
        } else {
            productField.classList.add("hidden");
            categoryField.classList.add("hidden");
            productId.required = false;
            categoryId.required = false;
        }
    });

    // Store the selected product's price or fetch category prices
    let selectedPrice = null;

    document.getElementById("productId").addEventListener("change", function () {
        const selectedOption = this.options[this.selectedIndex];
        selectedPrice = selectedOption ? parseFloat(selectedOption.getAttribute("data-price")) : null;
    });

    document.getElementById("categoryId").addEventListener("change", async function () {
        const categoryId = this.value;
        if (categoryId) {
            try {
                const response = await fetch(`/admin/category-products/${categoryId}`);
                const data = await response.json();
                if (data.success && data.products.length > 0) {
                    // Find the minimum regular price among products in the category
                    selectedPrice = Math.min(...data.products.map(p => p.regularPrice));
                } else {
                    selectedPrice = null; // No products in category
                }
            } catch (error) {
                console.error("Error fetching category products:", error);
                selectedPrice = null;
            }
        } else {
            selectedPrice = null;
        }
    });

    // Form Submission with Validation
    document.getElementById("offerForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        // Clear previous error messages
        document.querySelectorAll(".error-message").forEach(el => el.textContent = "");

        // Get form values
        const name = document.getElementById("name").value.trim();
        const type = document.getElementById("type").value;
        const productId = document.getElementById("productId").value;
        const categoryId = document.getElementById("categoryId").value;
        const discountType = document.getElementById("discountType").value;
        const discountValue = parseFloat(document.getElementById("discountValue").value);
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;

        // Validation checks
        let isValid = true;

        if (!name) {
            document.getElementById("nameError").textContent = "Offer Name is required.";
            isValid = false;
        }

        if (!type) {
            document.getElementById("typeError").textContent = "Offer Type is required.";
            isValid = false;
        } else if (type === "product" && !productId) {
            document.getElementById("productIdError").textContent = "Please select a Product for Product Offer.";
            isValid = false;
        } else if (type === "category" && !categoryId) {
            document.getElementById("categoryIdError").textContent = "Please select a Category for Category Offer.";
            isValid = false;
        }

        if (isNaN(discountValue) || discountValue <= 0) {
            document.getElementById("discountValueError").textContent = "Discount Value must be a positive number.";
            isValid = false;
        } else if (discountType === "percentage" && discountValue > 100) {
            document.getElementById("discountValueError").textContent = "Percentage discount cannot exceed 100%.";
            isValid = false;
        } else if (discountType === "amount" && selectedPrice !== null && discountValue > selectedPrice) {
            document.getElementById("discountValueError").textContent = `Discount Value cannot exceed the ${type === "product" ? "product" : "minimum category product"} price ($${selectedPrice}).`;
            isValid = false;
        } else if (discountType === "amount" && selectedPrice === null && type === "category") {
            document.getElementById("discountValueError").textContent = "No products found in the selected category to validate the discount.";
            isValid = false;
        }

        if (!startDate) {
            document.getElementById("startDateError").textContent = "Start Date is required.";
            isValid = false;
        }

        if (!endDate) {
            document.getElementById("endDateError").textContent = "End Date is required.";
            isValid = false;
        } else if (startDate && endDate && new Date(endDate) <= new Date(startDate)) {
            document.getElementById("endDateError").textContent = "End Date must be after Start Date.";
            isValid = false;
        }

        if (new Date(startDate) < new Date().setHours(0, 0, 0, 0)) {
            document.getElementById("startDateError").textContent = "Start Date cannot be in the past.";
            isValid = false;
        }

        // If validation fails, stop submission
        if (!isValid) return;

        // If validation passes, proceed with submission
        const formData = {
            name,
            type,
            discountType,
            discountValue,
            productId: type === "product" ? productId : null,
            categoryId: type === "category" ? categoryId : null,
            startDate,
            endDate
        };

        fetch('/admin/offer', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire(
                    'Success!',
                    'Offer added successfully.',
                    'success'
                ).then(() => {
                    window.location.href = '/admin/offer-list';
                });
            } else {
                document.getElementById("nameError").textContent = data.message || 'Failed to add offer.';
            }
        })
        .catch(error => {
            document.getElementById("nameError").textContent = 'An error occurred while adding the offer.';
        });
    });
</script>

<%- include("../../views/partials/admin/footer") %>