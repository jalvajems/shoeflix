<%- include("../../views/partials/admin/header") %>

<main class="main-wrap">
    <section class="content-main">
        <div class="content-header">
            <h2 class="content-title">Add New Offer</h2>
        </div>
        <div class="card">
            <div class="card-body">
                <form id="offerForm" action="/admin/offer" method="POST">
                    <div class="form-group">
                        <label for="name">Offer Name:</label>
                        <input type="text" class="form-control" id="name" name="name" >
                    </div>
                    <div class="form-group">
                        <label for="type">Offer Type:</label>
                        <select class="form-control" id="type" name="type" >
                            <option value="">Select Type</option>
                            <option value="product">Product Offer</option>
                            <option value="category">Category Offer</option>
                        </select>
                    </div>
                    <div class="form-group" id="productField">
                        <label for="productId">Select Product:</label>
                        <select class="form-control" id="productId" name="productId">
                            <option value="">Select Product</option>
                            <% products.forEach(product => { %>
                                <option value="<%= product._id %>"><%= product.productName %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="form-group hidden" id="categoryField">
                        <label for="categoryId">Select Category:</label>
                        <select class="form-control" id="categoryId" name="categoryId">
                            <option value="">Select Category</option>
                            <% categories.forEach(category => { %>
                                <option value="<%= category._id %>"><%= category.name %></option>
                            <% }); %>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="discountType">Discount Type:</label>
                        <select class="form-control" id="discountType" name="discountType" >
                            <option value="percentage">Percentage</option>
                            <option value="amount">Fixed Amount</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="discountValue">Discount Value:</label>
                        <input type="number" class="form-control" id="discountValue" name="discountValue" min="0" >
                    </div>
                    <div class="form-group">
                        <label for="startDate">Start Date:</label>
                        <input type="date" class="form-control" id="startDate" name="startDate" >
                    </div>
                    <div class="form-group">
                        <label for="endDate">End Date:</label>
                        <input type="date" class="form-control" id="endDate" name="endDate" >
                    </div>
                    <button type="submit" class="btn btn-primary">Add Offer</button>
                </form>
            </div>
        </div>
    </section>
</main>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Toggle Product/Category fields based on Offer Type
    document.getElementById("type").addEventListener("change", function () {
        const productField = document.getElementById("productField");
        const categoryField = document.getElementById("categoryField");
        const productId = document.getElementById("productId");
        const categoryId = document.getElementById("categoryId");

        if (this.value === "product") {
            productField.classList.remove("hidden");
            categoryField.classList.add("hidden");
            productId.required = true;
            categoryId.required = false;
        } else if (this.value === "category") {
            productField.classList.add("hidden");
            categoryField.classList.remove("hidden");
            productId.required = false;
            categoryId.required = true;
        } else {
            productField.classList.add("hidden");
            categoryField.classList.add("hidden");
            productId.required = false;
            categoryId.required = false;
        }
    });

    // Form Submission with Validation
    document.getElementById("offerForm").addEventListener("submit", function (e) {
        e.preventDefault();

        // Get form values
        const name = document.getElementById("name").value.trim();
        const type = document.getElementById("type").value;
        const productId = document.getElementById("productId").value;
        const categoryId = document.getElementById("categoryId").value;
        const discountType = document.getElementById("discountType").value;
        const discountValue = parseFloat(document.getElementById("discountValue").value);
        const startDate = document.getElementById("startDate").value;
        const endDate = document.getElementById("endDate").value;

        // Validation checks
        let errors = [];

        if (!name) {
            errors.push("Offer Name is required.");
        }

        if (!type) {
            errors.push("Offer Type is required.");
        } else if (type === "product" && !productId) {
            errors.push("Please select a Product for Product Offer.");
        } else if (type === "category" && !categoryId) {
            errors.push("Please select a Category for Category Offer.");
        }

        if (isNaN(discountValue) || discountValue <= 0) {
            errors.push("Discount Value must be a positive number.");
        } else if (discountType === "percentage" && discountValue > 100) {
            errors.push("Percentage discount cannot exceed 100%.");
        }

        if (!startDate) {
            errors.push("Start Date is required.");
        }

        if (!endDate) {
            errors.push("End Date is required.");
        } else if (startDate && endDate && new Date(endDate) <= new Date(startDate)) {
            errors.push("End Date must be after Start Date.");
        }

        if (new Date(startDate) < new Date().setHours(0, 0, 0, 0)) {
            errors.push("Start Date cannot be in the past.");
        }

        // If there are errors, show them and stop submission
        if (errors.length > 0) {
            Swal.fire({
                title: 'Validation Error',
                html: errors.join("<br>"),
                icon: 'error'
            });
            return;
        }

        // If validation passes, proceed with confirmation
        Swal.fire({
            title: 'Are you sure?',
            text: "Do you want to add this offer?",
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, add it!'
        }).then((result) => {
            if (result.isConfirmed) {
                const formData = {
                    name,
                    type,
                    discountType,
                    discountValue,
                    productId: type === "product" ? productId : null,
                    categoryId: type === "category" ? categoryId : null,
                    startDate,
                    endDate
                };

                fetch('/admin/offer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire(
                            'Success!',
                            'Offer added successfully.',
                            'success'
                        ).then(() => {
                            window.location.href = '/admin/offer-list';
                        });
                    } else {
                        Swal.fire(
                            'Error!',
                            data.message || 'Failed to add offer.',
                            'error'
                        );
                    }
                })
                .catch(error => {
                    Swal.fire(
                        'Error!',
                        'An error occurred while adding the offer.',
                        'error'
                    );
                });
            }
        });
    });
</script>

<%- include("../../views/partials/admin/footer") %>